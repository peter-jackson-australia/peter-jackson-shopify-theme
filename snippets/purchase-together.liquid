{% comment %}
SETTING UP THIS FEATURE
-----------------------
A product metafield definition with the namespace and key `taillour.purchase_together`
should be created with the type of `Product variant`. The metafield should allow a
'List of product variants'.

This metafield will be available on the "edit product" page within the admin where
variants can be assigned.

The first item in the "purchase together" block will always be the currently
viewed product.
{% endcomment %}
{% liquid
assign product_list = product.metafields.taillour.purchase_together
assign product_list_values = product_list.value | where: "available", true
if current_variant.available == true
  assign count = 1
else
  assign count = 0
endif
assign image_width = block.settings.thumbnail_size | default: 150
unless current_variant.available == false
  assign total = current_variant.price
endunless
%}

{% unless product_list_values == blank %}
<style>
#purchase-together > div {
  flex: 1;
  flex-basis: 25%;
}
.purchase-together-item {
  position: relative;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 0.5rem
}
.purchase-together-item:nth-child(1n+2):before {
  content: "+";
  font-weight: var(--bold);
  font-size: 1.25rem;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 1rem;
  height: 1rem;
  position: absolute;
  left: -1rem;
  top: 60px;
}
.purchase-together-item input[type="checkbox"] {
  position: absolute;
  right: 0.25rem;
  top: 0.25rem;
}
.purchase-together-item img {
  width: 100%;
  height: 100%;
  border-radius: 5px;
  object-fit: contain;
  border: 1px solid rgba(0,0,0,0.2);
  padding: 2px;
}
.purchase-together-item a {
  text-decoration: none;
}
.purchase-together-item a:hover {
  text-decoration: underline;
}
.js--purchase-item:disabled + img {
  opacity: 0.5;
}
#js--purchase-cart p {
  line-height: 1.35rem;
  margin-bottom: 0.5rem;
}
#js--purchase-message {
  border: var(--border);
  background: var(--cream);
  padding: 1rem;
  aspect-ratio: 1/1;
  border-radius: 5px;
  display: flex;
  align-items: center;
  justify-content: center;
}
#js--purchase-message p {
  line-height: 1.35rem;
  font-size: 1rem;
}
@media (max-width:500px) {
  #purchase-together {
    flex-wrap: wrap;
  }
  #js--purchase-cart {
    text-align: center;
  }
  #purchase-together > div:last-child {
    flex-basis: 100%;
    background-color: #f7f7f7;
    border: 1px solid #f1f1f1;
    border-radius: 5px;
    padding: 0.5rem 0.5rem 1rem 0.5rem;
  }
}
</style>

<h3>{{ block.settings.heading }}</h3>

<div id="purchase-together" class="purchase-together flex">
  <div class="purchase-together-item">
    {% comment %}
    This is the main item.
    {% endcomment %}
    <input type="checkbox"
      class="js--variant-id js--purchase-item"
      name="purchase[]"
      value="{{ current_variant.id }}"
      data-price="{{ current_variant.price }}"
      {% if current_variant.available == true %}checked{% endif %}
      {% if current_variant.available == false %}disabled{% endif %}>
    <img src="{{ product.featured_image | image_url: width: image_width }}"
      width="{{ image_width }}" height="{{ image_width }}" />
    <div class="small-text">
      <strong>This item:</strong> {{ product.title }}
    </div>
    <div>
      <strong class="js--variant-price">{{ current_variant.price | money }}</strong>
    </div>
  </div>

  {% comment %}
  Loop through the items in the product metafield.
  {% endcomment %}
  {% for item in product_list_values limit: block.settings.limit %}
    {% assign count = count | plus: 1 %}
    {% assign total = total | plus: item.price %}
    <div class="purchase-together-item">
      <input type="checkbox"
        class="js--purchase-item"
        name="purchase[]"
        value="{{ item.id }}"
        data-price="{{ item.price }}"
        checked>
      <a href="{{ item.product.url }}" style="display:block;width:100%;">
        <img src="{{ item.product.featured_image | image_url: width: image_width }}"
          width="{{ image_width }}" height="{{ image_width }}" />
      </a>
      <div class="small-text">
        <a href="{{ item.product.url }}">{{ item.product.title }} - {{ item.title }}</a>
      </div>
      <div>
        <strong>{{ item.price | money }}</strong>
      </div>
    </div>
  {% endfor %}

  {% comment %}
  Display totals and other messages.
  {% endcomment %}
  <div>
    <div id="js--purchase-message" class="center" style="display: none;">
      <p class="nomargin">Choose items to buy together.</p>
    </div>
    <div id="js--purchase-cart">
      <p class="nomargin">
        {{ block.settings.total_label }}
        <strong class="js--purchase-total">{{ total | money }}</strong>
      </p>
      <button type="button"
        class="button-small"
        onclick="purchaseTogetherCart();">
        Add all <span class="js--purchase-count">{{ count }}</span> to cart
      </button>
    </div>
  </div>
</div>

<hr>

<script>
/*
* Listen for changes to variant selector and purchased together inputs,
* so the variant IDs and totals can be updated as required.
*/
let purchaseTogether = document.getElementById('purchase-together');

ready(function() {
  document.querySelectorAll('.js--purchase-item, .js--variant-option').forEach(function(item){
    item.addEventListener('change', function(event){
      let data = checkPurchaseTogetherItems();
      // console.log(data);
      purchaseTogether.querySelectorAll('.js--purchase-total').forEach(function(el){
        el.innerText = data.total;
      });
      purchaseTogether.querySelectorAll('.js--purchase-count').forEach(function(el){
        el.innerText = data.count;
      });
    });
  });
});

/*
* Hides the "Choose items to buy together" messaging,
* and returns the purchase together totals and count.
*/
function checkPurchaseTogetherItems() {
  let purchaseTogetherItems = purchaseTogether.querySelectorAll('.js--purchase-item:checked');
  let purchaseTogetherTotal = 0;
  let purchaseTogetherCount = 0;
  purchaseTogetherItems.forEach(function(el){
    purchaseTogetherTotal += el.dataset.price * 1;
    purchaseTogetherCount += 1;
  });

  if (purchaseTogetherCount == 0) {
    document.getElementById('js--purchase-message').style.display = "";
    document.getElementById('js--purchase-cart').style.display = "none";
  } else {
    document.getElementById('js--purchase-message').style.display = "none";
    document.getElementById('js--purchase-cart').style.display = "";
  }

  return {
    total: Shopify.formatMoney(purchaseTogetherTotal),
    count: purchaseTogetherCount
  }
}

/*
* Add selected items to cart.
*/
function purchaseTogetherCart() {
  let products = purchaseTogether.querySelectorAll('.js--purchase-item:checked:not(:disabled)');
  let items = [];

  if (products.length > 0) {
    products.forEach(function(el){
      items.push({
        quantity: 1,
        id: el.value
      })
    });

    // Add items to the cart
    fetch('/cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        items: items
      })
    }).then(response => response.json())
    .then(data => {
        window.location.href = "/cart";
    });

  }
}
</script>
{% endunless %}
