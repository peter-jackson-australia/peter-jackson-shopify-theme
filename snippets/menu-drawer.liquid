{% comment %}
  Mega Menu Sidebar Drawer
  - Supports up to 3 levels of menu nesting
  - Toggles via header button or overlay click
  - Uses Alpine.js for state management
{% endcomment %}

<style>
  .menu-drawer__container {
    position: relative;
    z-index: 1000;
  }

  .menu-drawer__overlay {
    position: fixed;
    top: var(--header-height, 60px);
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1001;
  }

  .menu-drawer {
    position: fixed;
    top: var(--header-height, 60px);
    left: 0;
    bottom: 0;
    width: 100%;
    max-width: 350px;
    background: white;
    overflow-y: auto;
    z-index: 1002;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  }

  .menu-drawer__level {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow-y: auto;
  }

  .menu-drawer__header {
    display: flex;
    align-items: center;
    padding: 15px;
    border-bottom: 1px solid #eee;
  }

  .menu-drawer__heading {
    margin: 0;
    padding: 15px;
    font-size: 18px;
    border-bottom: 1px solid #eee;
  }

  .menu-drawer__header .menu-drawer__heading {
    border-bottom: none;
    padding: 0 0 0 15px;
    flex-grow: 1;
  }

  .menu-drawer__menu {
    margin: 0;
    padding: 0;
    list-style: none;
  }

  .menu-drawer__link,
  .menu-drawer__button {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    padding: 15px;
    text-decoration: none;
    text-align: left;
    border: none;
    background: none;
    color: inherit;
    font-size: 16px;
    cursor: pointer;
    border-bottom: 1px solid #eee;
  }

  .menu-drawer__back {
    display: flex;
    align-items: center;
    background: none;
    border: none;
    padding: 0;
    cursor: pointer;
    font-size: 14px;
  }

  .icon {
    width: 20px;
    height: 20px;
    stroke: currentColor;
    stroke-width: 2;
    fill: none;
  }

  .menu-drawer__back .icon {
    margin-right: 5px;
  }

  /* When menu is open, prevent body scroll */
  body.menu-open {
    overflow: hidden;
  }
</style>

<div
  x-data="menuDrawer"
  x-init="init()"
  @keydown.escape.window="closeMenu()"
  class="menu-drawer__container"
>
  <!-- Overlay -->
  <div
    x-show="isOpen"
    x-transition:enter="transition-opacity ease-in-out duration-300"
    x-transition:enter-start="opacity-0"
    x-transition:enter-end="opacity-100"
    x-transition:leave="transition-opacity ease-in-out duration-300"
    x-transition:leave-start="opacity-100"
    x-transition:leave-end="opacity-0"
    @click="closeMenu()"
    class="menu-drawer__overlay"
  ></div>

  <!-- Menu Drawer -->
  <div
    x-show="isOpen"
    x-transition:enter="transition-transform ease-in-out duration-300"
    x-transition:enter-start="-translate-x-full"
    x-transition:enter-end="translate-x-0"
    x-transition:leave="transition-transform ease-in-out duration-300"
    x-transition:leave-start="translate-x-0"
    x-transition:leave-end="-translate-x-full"
    class="menu-drawer"
  >
    <!-- Level 1 -->
    <div
      x-show="currentLevel === 1"
      class="menu-drawer__level"
    >
      <h2 class="menu-drawer__heading">Menu</h2>
      <ul class="menu-drawer__menu">
        {% for link in linklists['main-menu'].links %}
          <li>
            {% if link.links.size > 0 %}
              <button
                @click="openLevel(2, '{{ link.title }}', {{ link.links | json }})"
                class="menu-drawer__button menu-drawer__button--has-submenu"
              >
                <span>{{ link.title }}</span>
                <svg class="icon" viewBox="0 0 24 24">
                  <path d="M8 4l8 8-8 8"></path>
                </svg>
              </button>
            {% else %}
              <a href="{{ link.url }}" class="menu-drawer__link">{{ link.title }}</a>
            {% endif %}
          </li>
        {% endfor %}
      </ul>
    </div>

    <!-- Level 2 -->
    <div
      x-show="currentLevel === 2"
      x-transition:enter="transition-transform ease-in-out duration-300"
      x-transition:enter-start="translate-x-full"
      x-transition:enter-end="translate-x-0"
      x-transition:leave="transition-transform ease-in-out duration-300"
      x-transition:leave-start="translate-x-0"
      x-transition:leave-end="translate-x-full"
      class="menu-drawer__level"
    >
      <div class="menu-drawer__header">
        <button @click="backLevel()" class="menu-drawer__back">
          <svg class="icon" viewBox="0 0 24 24">
            <path d="M16 4l-8 8 8 8"></path>
          </svg>
          <span>Back</span>
        </button>
        <h2 class="menu-drawer__heading" x-text="currentTitle"></h2>
      </div>
      <ul class="menu-drawer__menu">
        <template x-for="item in currentSubMenu" :key="item.title">
          <li>
            <template x-if="item.links && item.links.length > 0">
              <button
                @click="openLevel(3, item.title, item.links)"
                class="menu-drawer__button menu-drawer__button--has-submenu"
              >
                <span x-text="item.title"></span>
                <svg class="icon" viewBox="0 0 24 24">
                  <path d="M8 4l8 8-8 8"></path>
                </svg>
              </button>
            </template>
            <template x-if="!item.links || item.links.length === 0">
              <a :href="item.url" class="menu-drawer__link" x-text="item.title"></a>
            </template>
          </li>
        </template>
      </ul>
    </div>

    <!-- Level 3 -->
    <div
      x-show="currentLevel === 3"
      x-transition:enter="transition-transform ease-in-out duration-300"
      x-transition:enter-start="translate-x-full"
      x-transition:enter-end="translate-x-0"
      x-transition:leave="transition-transform ease-in-out duration-300"
      x-transition:leave-start="translate-x-0"
      x-transition:leave-end="translate-x-full"
      class="menu-drawer__level"
    >
      <div class="menu-drawer__header">
        <button @click="backLevel()" class="menu-drawer__back">
          <svg class="icon" viewBox="0 0 24 24">
            <path d="M16 4l-8 8 8 8"></path>
          </svg>
          <span>Back</span>
        </button>
        <h2 class="menu-drawer__heading" x-text="currentTitle"></h2>
      </div>
      <ul class="menu-drawer__menu">
        <template x-for="item in currentSubMenu" :key="item.title">
          <li>
            <a :href="item.url" class="menu-drawer__link" x-text="item.title"></a>
          </li>
        </template>
      </ul>
    </div>
  </div>
</div>

<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('menuDrawer', () => ({
      isOpen: false,
      currentLevel: 1,
      currentTitle: '',
      currentSubMenu: [],
      menuHistory: [],

      init() {
        // Set custom property for header height
        const headerHeight = document.querySelector('header').offsetHeight;
        document.documentElement.style.setProperty('--header-height', `${headerHeight}px`);

        // Listen for toggle events from header button
        window.toggleNav = () => {
          this.isOpen ? this.closeMenu() : this.openMenu();
        };
      },

      openMenu() {
        this.isOpen = true;
        this.currentLevel = 1;
        this.currentTitle = 'Menu';
        this.currentSubMenu = [];
        this.menuHistory = [];
        document.body.classList.add('menu-open');
      },

      closeMenu() {
        this.isOpen = false;
        document.body.classList.remove('menu-open');
      },

      openLevel(level, title, submenu) {
        // Save current state to history for back navigation
        this.menuHistory.push({
          level: this.currentLevel,
          title: this.currentTitle,
          submenu: this.currentSubMenu,
        });

        this.currentLevel = level;
        this.currentTitle = title;
        this.currentSubMenu = submenu;
      },

      backLevel() {
        if (this.menuHistory.length > 0) {
          // Restore state from history
          const previousState = this.menuHistory.pop();
          this.currentLevel = previousState.level;
          this.currentTitle = previousState.title;
          this.currentSubMenu = previousState.submenu;
        } else {
          // If no history, go back to level 1
          this.currentLevel = 1;
        }
      },
    }));
  });
</script>
