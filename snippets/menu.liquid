{% comment %}
  Mega Menu Sidebar Drawer with side-by-side levels
{% endcomment %}

<style>
  .menu-drawer__container {
    position: relative;
    z-index: 1000;
  }

  .menu-drawer__overlay {
    position: fixed;
    top: var(--header-height, 60px);
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1001;
  }

  .menu-drawer {
    position: fixed;
    top: var(--header-height, 60px);
    left: 0;
    bottom: 0;
    width: 350px;
    background: white;
    overflow-x: hidden;
    z-index: 1002;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  }

  .menu-drawer[data-active-level='2'] {
    width: 700px;
  }

  .menu-drawer[data-active-level='3'] {
    width: 1050px;
  }

  .menu-drawer__inner {
    display: flex;
    width: 1050px;
  }

  .menu-drawer__level {
    width: 350px;
    min-width: 350px;
    height: 100%;
    overflow-y: auto;
    border-right: 1px solid #eee;
    display: none;
  }

  .menu-drawer__level.active {
    display: block;
  }

  .menu-drawer__heading {
    margin: 0;
    padding: 15px;
    font-size: 18px;
    border-bottom: 1px solid #eee;
  }

  .menu-drawer__header {
    display: flex;
    align-items: center;
    padding: 15px;
    border-bottom: 1px solid #eee;
  }

  .menu-drawer__header .menu-drawer__heading {
    border-bottom: none;
    padding: 0 0 0 15px;
    flex-grow: 1;
  }

  .menu-drawer__menu {
    margin: 0;
    padding: 0;
    list-style: none;
  }

  .menu-drawer__link,
  .menu-drawer__button {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    padding: 15px;
    text-decoration: none;
    text-align: left;
    border: none;
    background: none;
    color: inherit;
    font-size: 16px;
    cursor: pointer;
    border-bottom: 1px solid #eee;
  }

  .menu-drawer__back {
    display: flex;
    align-items: center;
    background: none;
    border: none;
    padding: 0;
    cursor: pointer;
    font-size: 14px;
  }

  .icon {
    width: 20px;
    height: 20px;
    stroke: currentColor;
    stroke-width: 2;
    fill: none;
  }

  .menu-drawer__back .icon {
    margin-right: 5px;
  }

  body.menu-open {
    overflow: hidden;
  }

  .menu-drawer__featured-image {
    width: 100%;
    height: 200px;
    background-color: #f5f5f5;
    position: relative;
    overflow: hidden;
    border-bottom: 1px solid #eee;
    will-change: transform;
  }

  .menu-drawer__featured-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: opacity 0.2s ease;
    transform: translateZ(0);
  }
</style>

<div
  x-data="menuDrawer"
  x-init="init()"
  @keydown.escape.window="closeMenu()"
  class="menu-drawer__container"
>
  <!-- Overlay -->
  <div
    x-show="isOpen"
    class="menu-drawer__overlay"
    @click="closeMenu()"
  ></div>

  <!-- Menu Drawer -->
  <div
    x-show="isOpen"
    :data-active-level="currentLevel"
    class="menu-drawer"
  >
    <div class="menu-drawer__inner">
      <!-- Menu Level 1 -->
      <div
        :class="{'menu-drawer__level': true, 'active': currentLevel >= 1}"
        id="menu-drawer-level-1"
      >
        <h2 class="menu-drawer__heading">Menu</h2>
        <ul class="menu-drawer__menu">
          {% for link in linklists['main-menu'].links %}
            <li>
              {% if link.links.size > 0 %}
                <button
                  @click="openLevel(2, '{{ link.title | escape }}', {{ forloop.index0 }}, '{{ link.object.featured_image | image_url: '1200x' }}', '{{ link.object.featured_image.alt | escape }}')"
                  class="menu-drawer__button menu-drawer__button--has-submenu"
                >
                  <span>{{ link.title }}</span>
                  <svg class="icon" viewBox="0 0 24 24">
                    <path d="M8 4l8 8-8 8"></path>
                  </svg>
                </button>
              {% else %}
                <a href="{{ link.url }}" class="menu-drawer__link">{{ link.title }}</a>
              {% endif %}
            </li>
          {% endfor %}
        </ul>
      </div>

      <!-- Menu Level 2 -->
      <div
        :class="{'menu-drawer__level': true, 'active': currentLevel >= 2}"
        id="menu-drawer-level-2"
      >
        <div class="menu-drawer__header">
          <button @click="backLevel()" class="menu-drawer__back">
            <svg class="icon" viewBox="0 0 24 24">
              <path d="M16 4l-8 8 8 8"></path>
            </svg>
            <span>Back</span>
          </button>
          <h2 class="menu-drawer__heading" x-text="menuTitle"></h2>
        </div>

        <div class="menu-drawer__featured-image">
          <img
            :src="featuredImageUrl"
            :alt="featuredImageAlt"
            :srcset="generateSrcset(featuredImageUrl)"
            loading="eager"
            x-bind:style="{ opacity: imageLoaded ? 1 : 0 }"
            @load="imageLoaded = true"
            height="100"
            width="100"
          >
        </div>

        <ul class="menu-drawer__menu">
          <template x-for="(item, childIndex) in submenu" :key="childIndex">
            <li>
              <template x-if="item.links && item.links.length > 0">
                <button
                  @click="openLevel(3, item.title, currentParentIndex, null, null, childIndex)"
                  class="menu-drawer__button menu-drawer__button--has-submenu"
                >
                  <span x-text="item.title"></span>
                  <svg class="icon" viewBox="0 0 24 24">
                    <path d="M8 4l8 8-8 8"></path>
                  </svg>
                </button>
              </template>
              <template x-if="!item.links || item.links.length === 0">
                <a :href="item.url" class="menu-drawer__link" x-text="item.title"></a>
              </template>
            </li>
          </template>
        </ul>
      </div>

      <!-- Menu Level 3 -->
      <div
        :class="{'menu-drawer__level': true, 'active': currentLevel >= 3}"
        id="menu-drawer-level-3"
      >
        <div class="menu-drawer__header">
          <button @click="backLevel()" class="menu-drawer__back">
            <svg class="icon" viewBox="0 0 24 24">
              <path d="M16 4l-8 8 8 8"></path>
            </svg>
            <span>Back</span>
          </button>
          <h2 class="menu-drawer__heading" x-text="subMenuTitle"></h2>
        </div>
        <ul class="menu-drawer__menu">
          <template x-for="(item, index) in subSubmenu" :key="index">
            <li>
              <a :href="item.url" class="menu-drawer__link" x-text="item.title"></a>
            </li>
          </template>
        </ul>
      </div>
    </div>
  </div>
</div>

<!-- Eventually move this to the assets folder for minifcation with the Shopify CDN -->
<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('menuDrawer', () => ({
      isOpen: false,
      currentLevel: 1,
      menuTitle: '',
      subMenuTitle: '',
      submenu: [],
      subSubmenu: [],
      menuData: [],
      currentParentIndex: 0,
      featuredImageUrl: '',
      featuredImageAlt: '',
      imageLoaded: false,

      init() {
        const headerHeight = document.querySelector('header')?.offsetHeight || 60;
        document.documentElement.style.setProperty('--header-height', `${headerHeight}px`);

        this.menuData = [
          {% for link in linklists['main-menu'].links %}
            {
              title: "{{ link.title | escape }}",
              url: "{{ link.url | escape }}",
              featuredImage: "{{ link.object.featured_image | image_url: '1200x' }}",
              featuredImageAlt: "{{ link.object.featured_image.alt | escape }}",
              links: [
                {% for childlink in link.links %}
                  {
                    title: "{{ childlink.title | escape }}",
                    url: "{{ childlink.url | escape }}",
                    links: [
                      {% for grandchildlink in childlink.links %}
                        {
                          title: "{{ grandchildlink.title | escape }}",
                          url: "{{ grandchildlink.url | escape }}"
                        }{% unless forloop.last %},{% endunless %}
                      {% endfor %}
                    ]
                  }{% unless forloop.last %},{% endunless %}
                {% endfor %}
              ]
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ];
        
        this.preloadCollectionImages();

        window.toggleNav = () => {
          this.isOpen ? this.closeMenu() : this.openMenu();
        };
      },

      openMenu() {
        this.isOpen = true;
        this.currentLevel = 1;
        document.body.classList.add('menu-open');
      },

      closeMenu() {
        this.isOpen = false;
        document.body.classList.remove('menu-open');
      },

openLevel(level, title, parentIndex, featuredImage, featuredImageAlt, childIndex) {
  const previousLevel = this.currentLevel;
  this.currentLevel = level;

  if (level === 2) {
    this.menuTitle = title;
    this.currentParentIndex = parentIndex;
    this.submenu = this.menuData[parentIndex].links;
    this.imageLoaded = false;
    
    if (featuredImage) {
      this.featuredImageUrl = featuredImage;
      this.featuredImageAlt = featuredImageAlt || title;
    } 

    else {
      this.featuredImageUrl = this.menuData[parentIndex].featuredImage;
      this.featuredImageAlt = this.menuData[parentIndex].featuredImageAlt || title;
    }
    
    if (this.featuredImageUrl) {
      const img = new Image();
      img.src = this.featuredImageUrl;
    }
  } else if (level === 3) {
    this.subMenuTitle = title;
    this.subSubmenu = this.menuData[this.currentParentIndex].links[childIndex].links;
    
  }
},

      backLevel() {
        if (this.currentLevel > 1) {
          this.currentLevel--;
          
          if (this.currentLevel === 1) {
            this.featuredImageUrl = '';
            this.featuredImageAlt = '';
          }
        }
      },
      
      generateSrcset(baseUrl) {
        if (!baseUrl) return '';
        
        const urlParts = baseUrl.split('_1200x');
        if (urlParts.length !== 2) return baseUrl;
        
        const baseUrlWithoutSize = urlParts[0];
        const extension = urlParts[1];
        
        return [
          `${baseUrlWithoutSize}_400x${extension} 400w`,
          `${baseUrlWithoutSize}_800x${extension} 800w`,
          `${baseUrlWithoutSize}_1200x${extension} 1200w`
        ].join(', ');
      },
      
      preloadCollectionImages() {
        if (!this.menuData || !this.menuData.length) return;
        
        const imagesToPreload = this.menuData
          .filter(item => item.featuredImage)
          .map(item => item.featuredImage);
        
        imagesToPreload.forEach(imageUrl => {
          const img = new Image();
          img.src = imageUrl;
        });
      }
    }));
  });
</script>
