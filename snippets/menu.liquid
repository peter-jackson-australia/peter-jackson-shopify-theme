{% comment %}
  Mega Menu Sidebar Drawer Component
{% endcomment %}

<style>
  .menu-drawer__container {
    position: relative;
    z-index: 9997;
  }

  .menu-drawer__overlay {
    position: fixed;
    top: var(--space-xl);
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 9998;
  }

  .menu-drawer {
    position: fixed;
    top: var(--space-xl);
    bottom: 0;
    background: var(--white);
    overflow-x: hidden;
    z-index: 9999;
  }

  .menu-drawer__inner {
    display: flex;
  }

  .menu-drawer__level {
    width: 400px;
    height: 100%;
    overflow-y: auto;
    display: none;
  }

  .menu-drawer__level.active {
    display: block;
  }

  .menu-drawer__heading {
    margin: 0;
    padding: 15px;
    font-size: 18px;
  }

  .menu-drawer__header {
    display: flex;
    align-items: center;
    padding: 15px;
  }

  .menu-drawer__header .menu-drawer__heading {
    border-bottom: none;
    padding: 0 0 0 15px;
    flex-grow: 1;
  }

  .menu-drawer__menu {
    list-style: none;
    display: flex;
    flex-direction: column;
    gap: var(--space-s);
    padding: var(--space-m) var(--space-l);
  }

  #menu-drawer__menu-1 {
    border-bottom: 1px solid var(--neutral-200);
  }

  .menu-drawer__link,
  .menu-drawer__button {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    text-decoration: none;
    border: none;
    background: none;
    color: inherit;
    font-size: 16px;
    cursor: pointer;
  }

  .menu-drawer__back {
    display: flex;
    align-items: center;
    background: none;
    border: none;
    padding: 0;
    cursor: pointer;
    font-size: 14px;
  }

  .menu-drawer__back span {
    margin-left: var(--space-xs);
  }

  body.menu-open {
    overflow: hidden;
  }

  .menu-drawer__featured-image {
    width: 100%;
    position: relative;
    overflow: hidden;
    will-change: transform;
  }

  .menu-drawer__featured-image img {
    width: 100%;
    height: 100%;
    min-height: 350px;
    object-fit: cover;
    transition: opacity 0.2s ease;
    transform: translateZ(0);
  }

  .menu-drawer__featured-image.loading-new-image img {
    display: none;
  }

  .menu-drawer__video-container {
    width: 100%;
    overflow: hidden;
    padding: var(--space-m);
    border-bottom: 1px solid var(--neutral-200);
  }

  .menu-drawer__video {
    width: 100%;
    max-height: 300px;
    object-fit: cover;
    margin-bottom: var(--space-2xs);
    min-height: 260px;
  }

  .menu-drawer__item--inactive,
  .menu-drawer__media--inactive {
    opacity: 0.4;
  }

  .menu-drawer__item--active {
    opacity: 1;
    text-decoration: underline;
    font-weight: 500;
  }
</style>

<aside
  x-data="menuDrawer"
  x-init="init()"
  @keydown.escape.window="closeMenu()"
  class="menu-drawer__container"
  aria-label="Main menu"
>
  <div
    x-show="isOpen"
    class="menu-drawer__overlay"
    @click="closeMenu()"
    role="button"
    aria-label="Close menu"
    tabindex="-1"
  ></div>
  <nav x-show="isOpen" :data-active-level="currentLevel" class="menu-drawer">
    <div class="menu-drawer__inner">
      <!-- Menu Level 1 -->
      <section :class="{'menu-drawer__level': true, 'active': currentLevel >= 1}" id="menu-drawer-level-1">
        <!-- Menu Level 1 Links -->
        <ul class="menu-drawer__menu" role="menu" id="menu-drawer__menu-1">
          {% for link in linklists['main-menu'].links %}
            <li
              role="none"
              :class="{ 'menu-drawer__item--inactive': currentLevel >= 2 && {{ forloop.index0 }} !== activeLevel1Index, 'menu-drawer__item--active': currentLevel >= 2 && {{ forloop.index0 }} === activeLevel1Index }"
            >
              {% if link.links.size > 0 %}
                <button
                  @click="openLevel(2, '{{ link.title }}', {{ forloop.index0 }}, '{{ link.object.featured_image | image_url: width: 1200 }}', '{{ link.object.featured_image.alt }}')"
                  class="menu-drawer__button menu-drawer__button--has-submenu body--uppercase"
                  role="menuitem"
                  aria-haspopup="true"
                  aria-expanded="false"
                >
                  <span>{{ link.title }}</span>
                  {% render 'icon-arrow-see-more' %}
                </button>
              {% else %}
                <a href="{{ link.url }}" class="menu-drawer__link body--uppercase" role="menuitem">{{ link.title }}</a>
              {% endif %}
            </li>
          {% endfor %}
        </ul>
        <!-- Menu Level 1 Video -->
        <div class="menu-drawer__video-container" :class="{'menu-drawer__media--inactive': currentLevel >= 2}">
          <video
            class="menu-drawer__video"
            x-ref="menuVideo"
            x-init="$watch('isOpen', value => {if (value && $refs.menuVideo) {$refs.menuVideo.play().catch(e => console.log('Autoplay prevented:', e));} else if ($refs.menuVideo) {$refs.menuVideo.pause();}})"
            muted
            loop
            playsinline
            preload="metadata"
            aria-hidden="true"
          >
            <source src="https://cdn.shopify.com/videos/c/o/v/ccff09333a4c451588e9b1a091de9d04.mp4" type="video/mp4">
          </video>
          <p class="body">Winter 25 Collection</p>
        </div>
        <!-- Menu Level 1 Secondary Links -->
        <ul class="menu-drawer__menu" role="menu">
          {% for link in linklists['secondary-main-menu'].links %}
            <li role="none">
              <a href="{{ link.url }}" class="menu-drawer__link body--uppercase" role="menuitem">{{ link.title }}</a>
            </li>
          {% endfor %}
        </ul>
        <!-- Menu Level 1 Newsletter Form -->
        <div class="klaviyo-form-WH7CVh"></div>
      </section>

      <!-- Menu Level 2 -->
      <section
        :class="{'menu-drawer__level': true, 'active': currentLevel >= 2}"
        id="menu-drawer-level-2"
        aria-labelledby="menu-drawer-heading-2"
      >
        <header class="menu-drawer__header">
          <button @click="backLevel()" class="menu-drawer__back" aria-label="Back to previous menu">
            {% render 'icon-arrow-see-less' %}
            <span>Back</span>
          </button>
          <h2 class="menu-drawer__heading" id="menu-drawer-heading-2" x-text="decodeEntities(menuTitle)"></h2>
        </header>
        <!-- Menu Level 2 Featured Image -->
        <figure
          class="menu-drawer__featured-image"
          :class="{'loading-new-image': isImageLoading, 'menu-drawer__media--inactive': currentLevel >= 3 }"
        >
          <img
            :src="featuredImageUrl || '#'"
            :alt="featuredImageAlt"
            :srcset="generateSrcset(featuredImageUrl)"
            loading="eager"
            @load="imageLoaded = true; isImageLoading = false;"
            height="100"
            width="100"
          >
        </figure>
        <!-- Menu Level 2 Links -->
        <ul class="menu-drawer__menu" role="menu">
          <template x-for="(item, childIndex) in submenu" :key="childIndex">
            <li
              role="none"
              :class="
                {
                  'menu-drawer__item--inactive': currentLevel >= 3 && childIndex !== activeLevel2Index,
                  'menu-drawer__item--active': currentLevel >= 3 && childIndex === activeLevel2Index
                }
              "
            >
              <template x-if="item.links && item.links.length > 0">
                <button
                  @click="openLevel(3, item.title, currentParentIndex, null, null, childIndex)"
                  class="menu-drawer__button menu-drawer__button--has-submenu body--uppercase"
                  role="menuitem"
                  aria-haspopup="true"
                  aria-expanded="false"
                >
                  <span x-text="decodeEntities(item.title)"></span>
                  {% render 'icon-arrow-see-more' %}
                </button>
              </template>
              <template x-if="!item.links || item.links.length === 0">
                <a
                  :href="item.url"
                  class="menu-drawer__link body--uppercase"
                  role="menuitem"
                  x-text="decodeEntities(item.title)"
                ></a>
              </template>
            </li>
          </template>
        </ul>

        <!-- Blaze Slider with dynamically filtered blogs -->
        <div class="blaze-slider" x-ref="blazeSlider">
          <div class="blaze-container">
            <div class="blaze-track-container">
              <div class="blaze-track">
                <!-- Content will be generated by refreshSliderContent() -->
              </div>
            </div>
          </div>
        </div>
      </section>

      <!-- Menu Level 3 -->
      <section
        :class="{'menu-drawer__level': true, 'active': currentLevel >= 3}"
        id="menu-drawer-level-3"
        aria-labelledby="menu-drawer-heading-3"
      >
        <header class="menu-drawer__header">
          <button @click="backLevel()" class="menu-drawer__back" aria-label="Back to previous menu">
            {% render 'icon-arrow-see-less' %}
            <span>Back</span>
          </button>
          <h2 class="menu-drawer__heading" id="menu-drawer-heading-3" x-text="decodeEntities(subMenuTitle)"></h2>
        </header>
        <ul class="menu-drawer__menu" role="menu">
          <template x-for="(item, index) in subSubmenu" :key="index">
            <li role="none">
              <a
                :href="item.url"
                class="menu-drawer__link body--uppercase"
                role="menuitem"
                x-text="decodeEntities(item.title)"
              ></a>
            </li>
          </template>
        </ul>
      </section>

      <!-- Product Hover Menu -->
      <section
        :class="{'menu-drawer__level': true, 'active': isProductsVisible}"
        id="menu-drawer-products"
        aria-labelledby="menu-drawer-products-heading"
        @mouseenter="handleProductsMouseEnter()"
        @mouseleave="handleProductsMouseLeave()"
      >
        <header class="menu-drawer__header">
          <h2
            class="menu-drawer__heading"
            id="menu-drawer-products-heading"
            x-text="submenu[hoveredChildIndex]?.title + ' Preview' || 'Products'"
          ></h2>
        </header>

        <!-- Products list - we don't show loading indicator anymore -->
        <ul class="menu-drawer__menu" role="menu">
          <template x-for="(product, index) in collectionProducts" :key="index">
            <li role="none" class="menu-drawer__product-item">
              <div class="menu-drawer__product">
                <img
                  :src="product.image"
                  :alt="product.title"
                  width="60"
                  height="60"
                  class="menu-drawer__product-image"
                  onerror="this.style.display='none'"
                >
                <div class="menu-drawer__product-details">
                  <span x-text="product.title" class="menu-drawer__product-title"></span>
                </div>
              </div>
            </li>
          </template>
        </ul>
      </section>
    </div>
  </nav>
</aside>

<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('menuDrawer', () => ({
      isOpen: false,
      currentLevel: 1,
      menuTitle: '',
      subMenuTitle: '',
      submenu: [],
      subSubmenu: [],
      menuData: [],
      currentParentIndex: 0,
      featuredImageUrl: '',
      featuredImageAlt: '',
      imageLoaded: false,
      isImageLoading: false,
      activeLevel1Index: null,
      activeLevel2Index: null,
      filteredArticles: [],
      BlazeSlider: null,
      
      // Product hover functionality properties
      hoverTimerId: null,
      closeTimerId: null, // New property for the close timer
      mouseOnProducts: false, // New property to track mouse on products
      hoveredCollectionHandle: null,
      hoveredChildIndex: null,
      isProductsVisible: false,
      collectionProducts: [],
      isLoadingProducts: false,
      previousActiveLevel2Index: null,
      currentRequest: null, // Track the current API request
  
      init() {
        const headerHeight = document.querySelector('header')?.offsetHeight || 60;
        document.documentElement.style.setProperty('--header-height', `${headerHeight}px`);
  
        this.menuData = [
          {% for link in linklists['main-menu'].links %}
            {
              title: "{{ link.title | strip_html | replace: '"', '\"' | replace: "'", "\\'" }}",
              url: "{{ link.url }}",
              collectionId: "{{ link.object.id }}",
              featuredImage: "{{ link.object.featured_image | image_url: '1200x' }}",
              featuredImageAlt: "{{ link.object.featured_image.alt | strip_html | replace: '"', '\"' | replace: "'", "\\'" }}",
              links: [
                {% for childlink in link.links %}
                  {
                    title: "{{ childlink.title | strip_html | replace: '"', '\"' | replace: "'", "\\'" }}",
                    url: "{{ childlink.url }}",
                    links: [
                      {% for grandchildlink in childlink.links %}
                        {
                          title: "{{ grandchildlink.title | strip_html | replace: '"', '\"' | replace: "'", "\\'" }}",
                          url: "{{ grandchildlink.url }}"
                        }{% unless forloop.last %},{% endunless %}
                      {% endfor %}
                    ]
                  }{% unless forloop.last %},{% endunless %}
                {% endfor %}
              ]
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ];
  
        window.toggleNav = () => {
          this.isOpen ? this.closeMenu() : this.openMenu();
        };
      },
  
      decodeEntities(text) {
        if (!text) return '';
        const textarea = document.createElement('textarea');
        textarea.innerHTML = text;
        return textarea.value;
      },
  
      openMenu() {
        this.isOpen = true;
        this.currentLevel = 1;
        document.body.classList.add('menu-open');
      },
  
      closeMenu() {
        this.isOpen = false;
        document.body.classList.remove('menu-open');
  
        if (this.blazeSlider) {
          this.blazeSlider.destroy(); 
          this.blazeSlider = null; 
        }
  
        this.filteredArticles = []; 
      },
  
      refreshSliderContent() {
        const track = this.$refs.blazeSlider?.querySelector('.blaze-track');
        
        if (track) {
          track.innerHTML = '';
          
          this.filteredArticles.forEach(article => {
            const slideHTML = `
              <article class="menu-drawer__article">
                <div class="menu-drawer__article-content">
                  ${article.image ? `<img src="${article.image}" alt="${article.title}" class="menu-drawer__article-image" width="100" height="100">` : ''}
                  <p class="menu-drawer__article-tag">${article.tag}</p>
                  <header class="menu-drawer__article-header">
                    <h2 class="menu-drawer__article-title">${article.title}</h2>
                  </header>
                  <a class="menu-drawer__article-link" href=${article.url}>Read The Article <span><svg width="12" height="10" viewBox="0 0 12 10" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M6.6 1L10.6 5M10.6 5L6.6 9M10.6 5L1 5" stroke="#A0A0A0" stroke-width="0.75" stroke-linecap="square"/>
                  </svg>
                  </span></a>
                </div>
              </article>
            `;
            
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = slideHTML.trim();
            track.appendChild(tempDiv.firstElementChild);
          });
        }
      },
  
      openLevel(level, title, parentIndex, featuredImage, featuredImageAlt, childIndex) {
        if (level === 2 && this.activeLevel1Index === parentIndex && this.currentLevel > 1) {
          this.currentLevel = 1;
          this.activeLevel1Index = null;
          this.activeLevel2Index = null;
          this.featuredImageUrl = '';
          this.featuredImageAlt = '';
          return;
        }
        
        const isSameLevel2Item = level === 2 && this.currentLevel === 2 && this.currentParentIndex === parentIndex;
        const isSameLevel3Item = level === 3 && this.currentLevel === 3 && this.currentChildIndex === childIndex;
        
        if (isSameLevel2Item || isSameLevel3Item) {
          this.backLevel();
          return;
        }
        
        this.currentLevel = level;
  
        if (level === 2) {
          this.activeLevel1Index = parentIndex;
          this.activeLevel2Index = null;
          this.menuTitle = title;
          this.currentParentIndex = parentIndex;
          this.submenu = this.menuData[parentIndex].links;
          
          const prevUrl = this.featuredImageUrl;
          const newUrl = featuredImage || (this.menuData[parentIndex] ? this.menuData[parentIndex].featuredImage : '');
          const collectionId = this.menuData[parentIndex].collectionId;
  
          this.filteredArticles = this.getAllArticles().filter(article => 
            article.relatedIds.includes(collectionId)
          );      
  
          this.$nextTick(() => {
            this.refreshSliderContent();
            this.initBlazeSlider();
          });
          
          if (prevUrl !== newUrl) {
            this.isImageLoading = true;
            this.imageLoaded = false;
  
            if (featuredImage) {
              this.featuredImageUrl = featuredImage;
              this.featuredImageAlt = featuredImageAlt || title;
            } 
            else if (this.menuData[parentIndex]) {
              this.featuredImageUrl = this.menuData[parentIndex].featuredImage;
              this.featuredImageAlt = this.menuData[parentIndex].featuredImageAlt || title;
            }
          }
        } else if (level === 3) {
          this.activeLevel2Index = childIndex;
          this.subMenuTitle = title;
          this.currentChildIndex = childIndex; 
          this.subSubmenu = this.menuData[this.currentParentIndex].links[childIndex].links;
        }
      }, 
  
      backLevel() {
        if (this.currentLevel > 1) {
          this.currentLevel--;
          
          if (this.currentLevel === 1) {
            this.featuredImageUrl = '';
            this.featuredImageAlt = '';
            this.filteredArticles = []; 
            if (this.blazeSlider) {
              this.blazeSlider.destroy();
              this.blazeSlider = null; 
            }
          } else if (this.currentLevel === 2) {
            this.$nextTick(() => {
              this.refreshSliderContent();
              this.initBlazeSlider();
            });
          }
        }
      },
  
      initBlazeSlider() {
        if (this.blazeSlider) {
          this.blazeSlider.destroy();
          this.blazeSlider = null;
        }
        
        this.$nextTick(() => {
          if (this.filteredArticles.length > 0 && window.BlazeSlider && this.$refs.blazeSlider) {
            this.blazeSlider = new BlazeSlider(this.$refs.blazeSlider, {
              slidesToShow: 1,
              enableAutoplay: false,
              slideGap: '20px',
              loop: true,
              addEventListenerOptions: { passive: true }
            });
          }
        });
      },
  
      getAllArticles() {
        return [
          {% for article in blogs['the-jackson-journal'].articles limit: 50 %}
            {
              title: "{{ article.title | escape }}",
              image: "{{ article.image | image_url: width: '400px' }}",
              url: "{{ article.url | escape }}",
              tag: "{{ article.tags[0] | escape }}",
              relatedIds: [{% for relatedCollection in article.metafields.custom.related_collections.value %}'{{ relatedCollection.id }}',{% endfor %}]
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ];
      },
      
      generateSrcset(baseUrl) {
        if (!baseUrl) return '';
        
        const urlParts = baseUrl.split('_1200x');
        if (urlParts.length !== 2) return baseUrl;
        
        const baseUrlWithoutSize = urlParts[0];
        const extension = urlParts[1];
        
        return [
          `${baseUrlWithoutSize}_400x${extension} 400w`,
          `${baseUrlWithoutSize}_800x${extension} 800w`,
          `${baseUrlWithoutSize}_1200x${extension} 1200w`
        ].join(', ');
      },
    }));
  });
</script>