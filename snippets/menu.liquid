{% comment %}
  Mega Menu Sidebar Drawer with side-by-side levels

  TO D:O
  FUNCTIONALITY:
  Load in related content into infinite blazer slider
  Add hover drawer with 5 products from 2nd level drawer collection using blazer slider infinite slide
  Search component on mobile
  Make responsive
  replace menu button with hamburger and close SVG's
  Complete styling perfectly
  Animate with Framer Motion
  =================================TEST THOROUGHLY==============================================
  Remove unused CSS
  Check for duplicate CSS classes and ID's
  Clean up markup and Alpine
  Clean up JavaScript
  Format
  Put Javascript in bottom into own JS file in assets for minification
{% endcomment %}

<style>
  .menu-drawer__container {
    position: relative;
    z-index: 9997;
  }

  .menu-drawer__overlay {
    position: fixed;
    top: var(--space-xl);
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 9998;
  }

  .menu-drawer {
    position: fixed;
    top: var(--space-xl);
    bottom: 0;
    background: var(--white);
    overflow-x: hidden;
    z-index: 9999;
  }

  .menu-drawer__inner {
    display: flex;
  }

  .menu-drawer__level {
    width: 400px;
    height: 100%;
    overflow-y: auto;
    display: none;
  }

  .menu-drawer__level.active {
    display: block;
  }

  .menu-drawer__heading {
    margin: 0;
    padding: 15px;
    font-size: 18px;
  }

  .menu-drawer__header {
    display: flex;
    align-items: center;
    padding: 15px;
  }

  .menu-drawer__header .menu-drawer__heading {
    border-bottom: none;
    padding: 0 0 0 15px;
    flex-grow: 1;
  }

  .menu-drawer__menu {
    list-style: none;
    display: flex;
    flex-direction: column;
    gap: var(--space-s);
    padding: var(--space-m) var(--space-l);
  }

  #menu-drawer__menu-1 {
    border-bottom: 1px solid var(--neutral-200);
  }

  .menu-drawer__link,
  .menu-drawer__button {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    text-decoration: none;
    border: none;
    background: none;
    color: inherit;
    font-size: 16px;
    cursor: pointer;
  }

  .menu-drawer__back {
    display: flex;
    align-items: center;
    background: none;
    border: none;
    padding: 0;
    cursor: pointer;
    font-size: 14px;
  }

  .menu-drawer__back span {
    margin-left: var(--space-xs);
  }

  body.menu-open {
    overflow: hidden;
  }

  .menu-drawer__featured-image {
    width: 100%;
    position: relative;
    overflow: hidden;
    will-change: transform;
  }

  .menu-drawer__featured-image img {
    width: 100%;
    height: 100%;
    min-height: 350px;
    object-fit: cover;
    transition: opacity 0.2s ease;
    transform: translateZ(0);
  }

  .menu-drawer__featured-image.loading-new-image img {
    display: none;
  }

  .menu-drawer__video-container {
    width: 100%;
    overflow: hidden;
    padding: var(--space-m);
    border-bottom: 1px solid var(--neutral-200);
  }

  .menu-drawer__video {
    width: 100%;
    max-height: 300px;
    object-fit: cover;
    margin-bottom: var(--space-2xs);
    min-height: 260px;
  }

  .menu-drawer__item--inactive,
  .menu-drawer__media--inactive {
    opacity: 0.4;
  }

  .menu-drawer__item--active {
    opacity: 1;
    text-decoration: underline;
  }

  .blaze-track > * {
    width: 70%;
    height: 400px;
    background-color: var(--neutral-200);
  }
</style>

<aside
  x-data="menuDrawer"
  x-init="init()"
  @keydown.escape.window="closeMenu()"
  class="menu-drawer__container"
  aria-label="Main menu"
>
  <div
    x-show="isOpen"
    class="menu-drawer__overlay"
    @click="closeMenu()"
    role="button"
    aria-label="Close menu"
    tabindex="-1"
  ></div>

  <nav
    x-show="isOpen"
    :data-active-level="currentLevel"
    class="menu-drawer"
  >
    <div class="menu-drawer__inner">
      <!-- Menu Level 1 -->
      <section
        :class="{'menu-drawer__level': true, 'active': currentLevel >= 1}"
        id="menu-drawer-level-1"
      >
        <ul class="menu-drawer__menu" role="menu" id="menu-drawer__menu-1">
          {% for link in linklists['main-menu'].links %}
            <li
              role="none"
              :class="
                {
                  'menu-drawer__item--inactive': currentLevel >= 2 && {{ forloop.index0 }} !== activeLevel1Index,
                  'menu-drawer__item--active': currentLevel >= 2 && {{ forloop.index0 }} === activeLevel1Index
                }
              "
            >
              {% if link.links.size > 0 %}
                <button
                  @click="openLevel(2, '{{ link.title }}', {{ forloop.index0 }}, '{{ link.object.featured_image | image_url: width: 1200 }}', '{{ link.object.featured_image.alt }}')"
                  class="menu-drawer__button menu-drawer__button--has-submenu body--uppercase"
                  role="menuitem"
                  aria-haspopup="true"
                  aria-expanded="false"
                >
                  <span>{{ link.title }}</span>
                  {% render 'icon-arrow-see-more' %}
                </button>
              {% else %}
                <a href="{{ link.url }}" class="menu-drawer__link body--uppercase" role="menuitem">{{ link.title }}</a>
              {% endif %}
            </li>
          {% endfor %}
        </ul>

        <div class="menu-drawer__video-container" :class="{'menu-drawer__media--inactive': currentLevel >= 2}">
          <video
            class="menu-drawer__video"
            x-ref="menuVideo"
            x-init="
              $watch('isOpen', value => {
                if (value && $refs.menuVideo) {
                  $refs.menuVideo.play().catch(e => console.log('Autoplay prevented:', e));
                } else if ($refs.menuVideo) {
                  $refs.menuVideo.pause();
                }
              })
            "
            muted
            loop
            playsinline
            preload="metadata"
            aria-hidden="true"
          >
            <source
              src="https://cdn.shopify.com/videos/c/o/v/ccff09333a4c451588e9b1a091de9d04.mp4"
              type="video/mp4"
            >
          </video>
          <p class="body">Winter 25 Collection</p>
        </div>
        <ul class="menu-drawer__menu" role="menu">
          {% for link in linklists['secondary-main-menu'].links %}
            <li role="none">
              <a href="{{ link.url }}" class="menu-drawer__link body--uppercase" role="menuitem">{{ link.title }}</a>
            </li>
          {% endfor %}
        </ul>
        <div class="klaviyo-form-WH7CVh"></div>
      </section>

      <!-- Menu Level 2 -->
      <section
        :class="{'menu-drawer__level': true, 'active': currentLevel >= 2}"
        id="menu-drawer-level-2"
        aria-labelledby="menu-drawer-heading-2"
      >
        <header class="menu-drawer__header">
          <button @click="backLevel()" class="menu-drawer__back" aria-label="Back to previous menu">
            {% render 'icon-arrow-see-less' %}
            <span>Back</span>
          </button>
          <h2 class="menu-drawer__heading" id="menu-drawer-heading-2" x-text="decodeEntities(menuTitle)"></h2>
        </header>
        <figure
          class="menu-drawer__featured-image"
          :class="
            {
              'loading-new-image': isImageLoading,
              'menu-drawer__media--inactive': currentLevel >= 3
            }
          "
        >
          <img
            :src="featuredImageUrl || '#'"
            :alt="featuredImageAlt"
            :srcset="generateSrcset(featuredImageUrl)"
            loading="eager"
            @load="imageLoaded = true; isImageLoading = false;"
            height="100"
            width="100"
          >
        </figure>
        <ul class="menu-drawer__menu" role="menu">
          <template x-for="(item, childIndex) in submenu" :key="childIndex">
            <li
              role="none"
              :class="
                {
                  'menu-drawer__item--inactive': currentLevel >= 3 && childIndex !== activeLevel2Index,
                  'menu-drawer__item--active': currentLevel >= 3 && childIndex === activeLevel2Index
                }
              "
            >
              <template x-if="item.links && item.links.length > 0">
                <button
                  @click="openLevel(3, item.title, currentParentIndex, null, null, childIndex)"
                  class="menu-drawer__button menu-drawer__button--has-submenu body--uppercase"
                  role="menuitem"
                  aria-haspopup="true"
                  aria-expanded="false"
                >
                  <span x-text="decodeEntities(item.title)"></span>
                  {% render 'icon-arrow-see-more' %}
                </button>
              </template>
              <template x-if="!item.links || item.links.length === 0">
                <a
                  :href="item.url"
                  class="menu-drawer__link body--uppercase"
                  role="menuitem"
                  x-text="decodeEntities(item.title)"
                ></a>
              </template>
            </li>
          </template>
        </ul>
        <!-- Blaze Slider -->
        <div class="blaze-slider">
          <div class="blaze-container">
            <div class="blaze-track-container">
              <div class="blaze-track">
                <div>Blog article</div>
                <div>Blog article</div>
                <div>Blog article</div>
                <div>Blog article</div>
              </div>
            </div>
          </div>
        </div>

        <!-- I want this to print the ID for current collection (The one selected in menu level 1) -->
        {% assign suits_collection = collections.suits %}
        <script>
          const suitsCollection = {{ suits_collection | json }};
          console.log('Collection ID:', suitsCollection.id);
        </script>

        <!-- This prints out all of the blog articles for the jackson journal -->
        {% for article in blogs['the-jackson-journal'].articles %}
          <script>
            console.log("Article Title: ", {{ article.title | json }});
            console.log("Article Image URL: ", {{ article.image.src | json }});
            console.log("Article Handle: ", {{ article.handle | json }});
            // This one prints out the collection ID's related to the article, so for example
            console.log("Related Collection ID's: ", JSON.stringify({{ article.metafields.custom.related_collections}}.map(url => +url.replace(/^gid:\/\/shopify\/Collection\//, ''))));
          </script>
        {% endfor %}
      </section>

      <!-- Menu Level 3 -->
      <section
        :class="{'menu-drawer__level': true, 'active': currentLevel >= 3}"
        id="menu-drawer-level-3"
        aria-labelledby="menu-drawer-heading-3"
      >
        <header class="menu-drawer__header">
          <button @click="backLevel()" class="menu-drawer__back" aria-label="Back to previous menu">
            {% render 'icon-arrow-see-less' %}
            <span>Back</span>
          </button>
          <h2 class="menu-drawer__heading" id="menu-drawer-heading-3" x-text="decodeEntities(subMenuTitle)"></h2>
        </header>
        <ul class="menu-drawer__menu" role="menu">
          <template x-for="(item, index) in subSubmenu" :key="index">
            <li role="none">
              <a
                :href="item.url"
                class="menu-drawer__link body--uppercase"
                role="menuitem"
                x-text="decodeEntities(item.title)"
              ></a>
            </li>
          </template>
        </ul>
      </section>
    </div>
  </nav>
</aside>

<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('menuDrawer', () => ({
      isOpen: false,
      currentLevel: 1,
      menuTitle: '',
      subMenuTitle: '',
      submenu: [],
      subSubmenu: [],
      menuData: [],
      currentParentIndex: 0,
      featuredImageUrl: '',
      featuredImageAlt: '',
      imageLoaded: false,
      isImageLoading: false,
      activeLevel1Index: null,
      activeLevel2Index: null,

      init() {
        const headerHeight = document.querySelector('header')?.offsetHeight || 60;
        document.documentElement.style.setProperty('--header-height', `${headerHeight}px`);

        this.menuData = [
          {% for link in linklists['main-menu'].links %}
            {
              title: "{{ link.title | strip_html | replace: '"', '\"' | replace: "'", "\\'" }}",
              url: "{{ link.url }}",
              featuredImage: "{{ link.object.featured_image | image_url: '1200x' }}",
              featuredImageAlt: "{{ link.object.featured_image.alt | strip_html | replace: '"', '\"' | replace: "'", "\\'" }}",
              links: [
                {% for childlink in link.links %}
                  {
                    title: "{{ childlink.title | strip_html | replace: '"', '\"' | replace: "'", "\\'" }}",
                    url: "{{ childlink.url }}",
                    links: [
                      {% for grandchildlink in childlink.links %}
                        {
                          title: "{{ grandchildlink.title | strip_html | replace: '"', '\"' | replace: "'", "\\'" }}",
                          url: "{{ grandchildlink.url }}"
                        }{% unless forloop.last %},{% endunless %}
                      {% endfor %}
                    ]
                  }{% unless forloop.last %},{% endunless %}
                {% endfor %}
              ]
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ];

        window.toggleNav = () => {
          this.isOpen ? this.closeMenu() : this.openMenu();
        };
      },

      decodeEntities(text) {
        if (!text) return '';
        const textarea = document.createElement('textarea');
        textarea.innerHTML = text;
        return textarea.value;
      },

      openMenu() {
        this.isOpen = true;
        this.currentLevel = 1;
        document.body.classList.add('menu-open');
      },

      closeMenu() {
        this.isOpen = false;
        document.body.classList.remove('menu-open');
      },

      openLevel(level, title, parentIndex, featuredImage, featuredImageAlt, childIndex) {
        if (level === 2 && this.activeLevel1Index === parentIndex && this.currentLevel > 1) {
          this.currentLevel = 1;
          this.activeLevel1Index = null;
          this.activeLevel2Index = null;
          this.featuredImageUrl = '';
          this.featuredImageAlt = '';
          return;
        }
        
        const isSameLevel2Item = level === 2 && this.currentLevel === 2 && this.currentParentIndex === parentIndex;
        const isSameLevel3Item = level === 3 && this.currentLevel === 3 && this.currentChildIndex === childIndex;
        
        if (isSameLevel2Item || isSameLevel3Item) {
          this.backLevel();
          return;
        }
        
        this.currentLevel = level;

        if (level === 2) {
          this.activeLevel1Index = parentIndex;
          this.activeLevel2Index = null;
          this.menuTitle = title;
          this.currentParentIndex = parentIndex;
          this.submenu = this.menuData[parentIndex].links;
          
          const prevUrl = this.featuredImageUrl;
          const newUrl = featuredImage || (this.menuData[parentIndex] ? this.menuData[parentIndex].featuredImage : '');
          
          if (prevUrl !== newUrl) {
            this.isImageLoading = true;
            this.imageLoaded = false;

            if (featuredImage) {
              this.featuredImageUrl = featuredImage;
              this.featuredImageAlt = featuredImageAlt || title;
            } 
            else if (this.menuData[parentIndex]) {
              this.featuredImageUrl = this.menuData[parentIndex].featuredImage;
              this.featuredImageAlt = this.menuData[parentIndex].featuredImageAlt || title;
            }
          }
        } else if (level === 3) {
          this.activeLevel2Index = childIndex;
          this.subMenuTitle = title;
          this.currentChildIndex = childIndex; 
          this.subSubmenu = this.menuData[this.currentParentIndex].links[childIndex].links;
        }
      }, 

      backLevel() {
        if (this.currentLevel > 1) {
          this.currentLevel--;
          
          if (this.currentLevel === 1) {
            this.featuredImageUrl = '';
            this.featuredImageAlt = '';
          }
        }
      },
      
      generateSrcset(baseUrl) {
        if (!baseUrl) return '';
        
        const urlParts = baseUrl.split('_1200x');
        if (urlParts.length !== 2) return baseUrl;
        
        const baseUrlWithoutSize = urlParts[0];
        const extension = urlParts[1];
        
        return [
          `${baseUrlWithoutSize}_400x${extension} 400w`,
          `${baseUrlWithoutSize}_800x${extension} 800w`,
          `${baseUrlWithoutSize}_1200x${extension} 1200w`
        ].join(', ');
      }
    }));
  });
</script>
