{% comment %}
  Mega Menu Sidebar Drawer with side-by-side levels

  TO DO:
  FUNCTIONALITY:
  Add Newsletter Signup
  Toggle link open or closed by clicking it
  Add hover drawer with 5 products from 2nd level drawer collection using blazer slider infinite slide
  Load in related content into infinite blazer slider
  Toggle link open or closed by clicking it
  Search component on mobile
  Journal articles pull in
  Make responsive
  replace menu button with hamburger and close SVG's
  replace see more arrows with correct icons
  Complete styling
  =================================TEST THOROUGHLY==============================================
  Remove unused CSS
  Clean up markup and Alpine
  Clean up JavaScript
  Put Javascript in bottom into own JS file in assets for minification
{% endcomment %}

<style>
  .menu-drawer__container {
    position: relative;
    z-index: 9997;
  }

  .menu-drawer__overlay {
    position: fixed;
    top: var(--space-xl);
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 9998;
  }

  .menu-drawer {
    position: fixed;
    top: var(--space-xl);
    bottom: 0;
    background: var(--white);
    overflow-x: hidden;
    z-index: 9999;
  }

  .menu-drawer__inner {
    display: flex;
  }

  .menu-drawer__level {
    width: 400px;
    height: 100%;
    overflow-y: auto;
    display: none;
  }

  .menu-drawer__level.active {
    display: block;
  }

  .menu-drawer__heading {
    margin: 0;
    padding: 15px;
    font-size: 18px;
    border-bottom: 1px solid #eee;
  }

  .menu-drawer__header {
    display: flex;
    align-items: center;
    padding: 15px;
    border-bottom: 1px solid #eee;
  }

  .menu-drawer__header .menu-drawer__heading {
    border-bottom: none;
    padding: 0 0 0 15px;
    flex-grow: 1;
  }

  .menu-drawer__menu {
    list-style: none;
    display: flex;
    flex-direction: column;
    gap: var(--space-s);
    padding: var(--space-m) var(--space-l);
  }

  #menu-drawer__menu-1 {
    border-bottom: 1px solid var(--neutral-200);
  }

  .menu-drawer__link,
  .menu-drawer__button {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    text-decoration: none;
    border: none;
    background: none;
    color: inherit;
    font-size: 16px;
    cursor: pointer;
  }

  .menu-drawer__back {
    display: flex;
    align-items: center;
    background: none;
    border: none;
    padding: 0;
    cursor: pointer;
    font-size: 14px;
  }

  .icon {
    width: 20px;
    height: 20px;
    stroke: currentColor;
    stroke-width: 2;
    fill: none;
  }

  .menu-drawer__back .icon {
    margin-right: 5px;
  }

  body.menu-open {
    overflow: hidden;
  }

  .menu-drawer__featured-image {
    width: 100%;
    position: relative;
    overflow: hidden;
    will-change: transform;
  }

  .menu-drawer__featured-image img {
    width: 100%;
    height: 100%;
    min-height: 350px;
    object-fit: cover;
    transition: opacity 0.2s ease;
    transform: translateZ(0);
  }

  .menu-drawer__featured-image.loading-new-image img {
    display: none;
  }

  .menu-drawer__video-container {
    width: 100%;
    overflow: hidden;
    padding: var(--space-m);
    border-bottom: 1px solid var(--neutral-200);
  }

  .menu-drawer__video {
    width: 100%;
    max-height: 300px;
    object-fit: cover;
    margin-bottom: var(--space-2xs);
    min-height: 260px;
  }
</style>

<aside
  x-data="menuDrawer"
  x-init="init()"
  @keydown.escape.window="closeMenu()"
  class="menu-drawer__container"
  aria-label="Main menu"
>
  <div
    x-show="isOpen"
    class="menu-drawer__overlay"
    @click="closeMenu()"
    role="button"
    aria-label="Close menu"
    tabindex="-1"
  ></div>

  <nav
    x-show="isOpen"
    :data-active-level="currentLevel"
    class="menu-drawer"
  >
    <div class="menu-drawer__inner">
      <section
        :class="{'menu-drawer__level': true, 'active': currentLevel >= 1}"
        id="menu-drawer-level-1"
      >
        <ul class="menu-drawer__menu" role="menu" id="menu-drawer__menu-1">
          {% for link in linklists['main-menu'].links %}
            <li role="none">
              {% if link.links.size > 0 %}
                <button
                  @click="openLevel(2, '{{ link.title }}', {{ forloop.index0 }}, '{{ link.object.featured_image | image_url: width: 1200 }}', '{{ link.object.featured_image.alt }}')"
                  class="menu-drawer__button menu-drawer__button--has-submenu body--uppercase"
                  role="menuitem"
                  aria-haspopup="true"
                  aria-expanded="false"
                >
                  <span>{{ link.title }}</span>
                  <svg class="icon" viewBox="0 0 24 24" aria-hidden="true">
                    <path d="M8 4l8 8-8 8"></path>
                  </svg>
                </button>
              {% else %}
                <a href="{{ link.url }}" class="menu-drawer__link body--uppercase" role="menuitem">{{ link.title }}</a>
              {% endif %}
            </li>
          {% endfor %}
        </ul>

        <div class="menu-drawer__video-container">
          <video
            class="menu-drawer__video"
            x-ref="menuVideo"
            x-init="
              $watch('isOpen', value => {
                if (value && $refs.menuVideo) {
                  $refs.menuVideo.load();
                  $refs.menuVideo.play().catch(e => console.log('Autoplay prevented:', e));
                } else if ($refs.menuVideo) {
                  $refs.menuVideo.pause();
                }
              })
            "
            muted
            loop
            playsinline
            preload="none"
            aria-hidden="true"
          >
            <source
              data-src="https://cdn.shopify.com/videos/c/o/v/ccff09333a4c451588e9b1a091de9d04.mp4"
              type="video/mp4"
            >
          </video>
          <p class="body">Winter 25 Collection</p>
        </div>
        <ul class="menu-drawer__menu" role="menu">
          {% for link in linklists['secondary-main-menu'].links %}
            <li role="none">
              <a href="{{ link.url }}" class="menu-drawer__link body--uppercase" role="menuitem">{{ link.title }}</a>
            </li>
          {% endfor %}
        </ul>
        <!-- Newsletter form -->
        <div class="menu-drawer__newsletter">
          <h3 class="menu-drawer__heading">Stay Updated</h3>
          <div class="menu-drawer__newsletter-content">
            {% form 'customer', class: 'form newsletter-signup-form' %}
              <input type="hidden" name="contact[tags]" value="newsletter">
              <div class="form-row">
                <input type="email" name="contact[email]" placeholder="Enter email address" required>
                <button type="submit" value="submit">Sign up</button>
              </div>
              <div class="form-row">
                <label class="flex align-center">
                  <input type="checkbox" required>
                  <span>I have read and accept the <a href="/pages/privacy-policy">privacy policy</a>.</span>
                </label>
              </div>
            {% endform %}
          </div>
        </div>
      </section>
      <section
        :class="{'menu-drawer__level': true, 'active': currentLevel >= 2}"
        id="menu-drawer-level-2"
        aria-labelledby="menu-drawer-heading-2"
      >
        <header class="menu-drawer__header">
          <button @click="backLevel()" class="menu-drawer__back" aria-label="Back to previous menu">
            <svg class="icon" viewBox="0 0 24 24" aria-hidden="true">
              <path d="M16 4l-8 8 8 8"></path>
            </svg>
            <span>Back</span>
          </button>
          <h2 class="menu-drawer__heading" id="menu-drawer-heading-2" x-text="decodeEntities(menuTitle)"></h2>
        </header>
        <figure
          class="menu-drawer__featured-image"
          :class="{'loading-new-image': isImageLoading}"
        >
          <img
            :src="featuredImageUrl || '#'"
            :alt="featuredImageAlt"
            :srcset="generateSrcset(featuredImageUrl)"
            loading="eager"
            @load="imageLoaded = true; isImageLoading = false;"
            height="100"
            width="100"
          >
        </figure>
        <ul class="menu-drawer__menu" role="menu">
          <template x-for="(item, childIndex) in submenu" :key="childIndex">
            <li role="none">
              <template x-if="item.links && item.links.length > 0">
                <button
                  @click="openLevel(3, item.title, currentParentIndex, null, null, childIndex)"
                  class="menu-drawer__button menu-drawer__button--has-submenu body--uppercase"
                  role="menuitem"
                  aria-haspopup="true"
                  aria-expanded="false"
                >
                  <span x-text="decodeEntities(item.title)"></span>
                  <svg class="icon" viewBox="0 0 24 24" aria-hidden="true">
                    <path d="M8 4l8 8-8 8"></path>
                  </svg>
                </button>
              </template>
              <template x-if="!item.links || item.links.length === 0">
                <a
                  :href="item.url"
                  class="menu-drawer__link body--uppercase"
                  role="menuitem"
                  x-text="decodeEntities(item.title)"
                ></a>
              </template>
            </li>
          </template>
        </ul>
      </section>
      <section
        :class="{'menu-drawer__level': true, 'active': currentLevel >= 3}"
        id="menu-drawer-level-3"
        aria-labelledby="menu-drawer-heading-3"
      >
        <header class="menu-drawer__header">
          <button @click="backLevel()" class="menu-drawer__back" aria-label="Back to previous menu">
            <svg class="icon" viewBox="0 0 24 24" aria-hidden="true">
              <path d="M16 4l-8 8 8 8"></path>
            </svg>
            <span>Back</span>
          </button>
          <h2 class="menu-drawer__heading" id="menu-drawer-heading-3" x-text="decodeEntities(subMenuTitle)"></h2>
        </header>
        <ul class="menu-drawer__menu" role="menu">
          <template x-for="(item, index) in subSubmenu" :key="index">
            <li role="none">
              <a
                :href="item.url"
                class="menu-drawer__link body--uppercase"
                role="menuitem"
                x-text="decodeEntities(item.title)"
              ></a>
            </li>
          </template>
        </ul>
      </section>
    </div>
  </nav>
</aside>
<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('menuDrawer', () => ({
      isOpen: false,
      currentLevel: 1,
      menuTitle: '',
      subMenuTitle: '',
      submenu: [],
      subSubmenu: [],
      menuData: [],
      currentParentIndex: 0,
      featuredImageUrl: '',
      featuredImageAlt: '',
      imageLoaded: false,
      isImageLoading: false,

      init() {
        const headerHeight = document.querySelector('header')?.offsetHeight || 60;
        document.documentElement.style.setProperty('--header-height', `${headerHeight}px`);

        this.menuData = [
          {% for link in linklists['main-menu'].links %}
            {
              title: "{{ link.title | strip_html | replace: '"', '\"' | replace: "'", "\\'" }}",
              url: "{{ link.url }}",
              featuredImage: "{{ link.object.featured_image | image_url: '1200x' }}",
              featuredImageAlt: "{{ link.object.featured_image.alt | strip_html | replace: '"', '\"' | replace: "'", "\\'" }}",
              links: [
                {% for childlink in link.links %}
                  {
                    title: "{{ childlink.title | strip_html | replace: '"', '\"' | replace: "'", "\\'" }}",
                    url: "{{ childlink.url }}",
                    links: [
                      {% for grandchildlink in childlink.links %}
                        {
                          title: "{{ grandchildlink.title | strip_html | replace: '"', '\"' | replace: "'", "\\'" }}",
                          url: "{{ grandchildlink.url }}"
                        }{% unless forloop.last %},{% endunless %}
                      {% endfor %}
                    ]
                  }{% unless forloop.last %},{% endunless %}
                {% endfor %}
              ]
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ];

        window.toggleNav = () => {
          this.isOpen ? this.closeMenu() : this.openMenu();
        };
      },

      decodeEntities(text) {
        if (!text) return '';
        const textarea = document.createElement('textarea');
        textarea.innerHTML = text;
        return textarea.value;
      },

      openMenu() {
        this.isOpen = true;
        this.currentLevel = 1;
        document.body.classList.add('menu-open');

        setTimeout(() => {
          const videoEl = this.$refs.menuVideo;
          if (videoEl) {
            const source = videoEl.querySelector('source');
            if (source && source.dataset.src) {
              source.src = source.dataset.src;
              videoEl.load();
              videoEl.play().catch(e => console.log('Autoplay prevented:', e));
            }
          }
        }, 100);
      },

      closeMenu() {
        this.isOpen = false;
        document.body.classList.remove('menu-open');
      },

      openLevel(level, title, parentIndex, featuredImage, featuredImageAlt, childIndex) {
        const previousLevel = this.currentLevel;
        
        const isSameLevel2Item = level === 2 && this.currentLevel === 2 && this.currentParentIndex === parentIndex;
        
        this.currentLevel = level;

        if (level === 2) {
          this.menuTitle = title;
          this.currentParentIndex = parentIndex;
          this.submenu = this.menuData[parentIndex].links;
          
          if (!isSameLevel2Item) {
            const prevUrl = this.featuredImageUrl;
            const newUrl = featuredImage || (this.menuData[parentIndex] ? this.menuData[parentIndex].featuredImage : '');
            
            if (prevUrl !== newUrl) {
              this.isImageLoading = true;
              this.imageLoaded = false;

              if (featuredImage) {
                this.featuredImageUrl = featuredImage;
                this.featuredImageAlt = featuredImageAlt || title;
              } 

              else if (this.menuData[parentIndex]) {
                this.featuredImageUrl = this.menuData[parentIndex].featuredImage;
                this.featuredImageAlt = this.menuData[parentIndex].featuredImageAlt || title;
              }
            }
          }
        } else if (level === 3) {
          this.subMenuTitle = title;
          this.subSubmenu = this.menuData[this.currentParentIndex].links[childIndex].links;
        }
      },

      backLevel() {
        if (this.currentLevel > 1) {
          this.currentLevel--;
          
          if (this.currentLevel === 1) {
            this.featuredImageUrl = '';
            this.featuredImageAlt = '';
          }
        }
      },
      
      generateSrcset(baseUrl) {
        if (!baseUrl) return '';
        
        const urlParts = baseUrl.split('_1200x');
        if (urlParts.length !== 2) return baseUrl;
        
        const baseUrlWithoutSize = urlParts[0];
        const extension = urlParts[1];
        
        return [
          `${baseUrlWithoutSize}_400x${extension} 400w`,
          `${baseUrlWithoutSize}_800x${extension} 800w`,
          `${baseUrlWithoutSize}_1200x${extension} 1200w`
        ].join(', ');
      }
    }));
  });
</script>
