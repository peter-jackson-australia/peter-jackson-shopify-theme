{% comment %}
  Mega Menu Sidebar Drawer with side-by-side levels

  TO DO:
  Remove unused CSS
  Add hover drawer with 5 products from 2nd level drawer collection
  add support for collection videos
  ensure that if no video or image is added to collection, nothing breaks
  Escape characters
  Put Javascript in bottom into own JS file in assets for minification
{% endcomment %}

<style>
  .menu-drawer__container {
    position: relative;
    z-index: 9997;
  }

  .menu-drawer__overlay {
    position: fixed;
    top: var(--header-height, 60px);
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 9998;
  }

  .menu-drawer {
    position: fixed;
    top: var(--header-height, 60px);
    bottom: 0;
    width: 350px;
    background: white;
    overflow-x: hidden;
    z-index: 9999;
  }

  .menu-drawer[data-active-level='2'] {
    width: 700px;
  }

  .menu-drawer[data-active-level='3'] {
    width: 1050px;
  }

  .menu-drawer__inner {
    display: flex;
    width: 1050px;
  }

  .menu-drawer__level {
    width: 350px;
    min-width: 350px;
    height: 100%;
    overflow-y: auto;
    border-right: 1px solid #eee;
    display: none;
  }

  .menu-drawer__level.active {
    display: block;
  }

  .menu-drawer__heading {
    margin: 0;
    padding: 15px;
    font-size: 18px;
    border-bottom: 1px solid #eee;
  }

  .menu-drawer__header {
    display: flex;
    align-items: center;
    padding: 15px;
    border-bottom: 1px solid #eee;
  }

  .menu-drawer__header .menu-drawer__heading {
    border-bottom: none;
    padding: 0 0 0 15px;
    flex-grow: 1;
  }

  .menu-drawer__menu {
    margin: 0;
    padding: 0;
    list-style: none;
  }

  .menu-drawer__link,
  .menu-drawer__button {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    padding: 15px;
    text-decoration: none;
    text-align: left;
    border: none;
    background: none;
    color: inherit;
    font-size: 16px;
    cursor: pointer;
    border-bottom: 1px solid #eee;
  }

  .menu-drawer__back {
    display: flex;
    align-items: center;
    background: none;
    border: none;
    padding: 0;
    cursor: pointer;
    font-size: 14px;
  }

  .icon {
    width: 20px;
    height: 20px;
    stroke: currentColor;
    stroke-width: 2;
    fill: none;
  }

  .menu-drawer__back .icon {
    margin-right: 5px;
  }

  body.menu-open {
    overflow: hidden;
  }

  .menu-drawer__featured-image {
    width: 100%;
    height: 200px;
    background-color: #f5f5f5;
    position: relative;
    overflow: hidden;
    border-bottom: 1px solid #eee;
    will-change: transform;
  }

  .menu-drawer__featured-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: opacity 0.2s ease;
    transform: translateZ(0);
  }

  .menu-drawer__featured-image.loading-new-image {
    background-color: #f5f5f5;
  }

  .menu-drawer__featured-image.loading-new-image img {
    display: none;
  }
</style>

<aside
  x-data="menuDrawer"
  x-init="init()"
  @keydown.escape.window="closeMenu()"
  class="menu-drawer__container"
  aria-label="Main menu"
>
  <div
    x-show="isOpen"
    class="menu-drawer__overlay"
    @click="closeMenu()"
    role="button"
    aria-label="Close menu"
    tabindex="-1"
  ></div>

  <nav
    x-show="isOpen"
    :data-active-level="currentLevel"
    class="menu-drawer"
  >
    <div class="menu-drawer__inner">
      <section
        :class="{'menu-drawer__level': true, 'active': currentLevel >= 1}"
        id="menu-drawer-level-1"
        aria-labelledby="menu-drawer-heading-1"
      >
        <h2 class="menu-drawer__heading" id="menu-drawer-heading-1">Menu</h2>
        <ul class="menu-drawer__menu" role="menu">
          {% for link in linklists['main-menu'].links %}
            <li role="none">
              {% if link.links.size > 0 %}
                <button
                  @click="openLevel(2, '{{ link.title | escape }}', {{ forloop.index0 }}, '{{ link.object.featured_image | image_url: width: 1200 }}', '{{ link.object.featured_image.alt | escape }}')"
                  class="menu-drawer__button menu-drawer__button--has-submenu"
                  role="menuitem"
                  aria-haspopup="true"
                  aria-expanded="false"
                >
                  <span>{{ link.title }}</span>
                  <svg class="icon" viewBox="0 0 24 24" aria-hidden="true">
                    <path d="M8 4l8 8-8 8"></path>
                  </svg>
                </button>
              {% else %}
                <a href="{{ link.url }}" class="menu-drawer__link" role="menuitem">{{ link.title }}</a>
              {% endif %}
            </li>
          {% endfor %}
        </ul>
      </section>
      <section
        :class="{'menu-drawer__level': true, 'active': currentLevel >= 2}"
        id="menu-drawer-level-2"
        aria-labelledby="menu-drawer-heading-2"
      >
        <header class="menu-drawer__header">
          <button @click="backLevel()" class="menu-drawer__back" aria-label="Back to previous menu">
            <svg class="icon" viewBox="0 0 24 24" aria-hidden="true">
              <path d="M16 4l-8 8 8 8"></path>
            </svg>
            <span>Back</span>
          </button>
          <h2 class="menu-drawer__heading" id="menu-drawer-heading-2" x-text="menuTitle"></h2>
        </header>
        <figure
          class="menu-drawer__featured-image"
          :class="{'loading-new-image': isImageLoading}"
        >
          <img
            :src="featuredImageUrl || '#'"
            :alt="featuredImageAlt"
            :srcset="generateSrcset(featuredImageUrl)"
            loading="eager"
            @load="imageLoaded = true; isImageLoading = false;"
            height="100"
            width="100"
          >
        </figure>
        <ul class="menu-drawer__menu" role="menu">
          <template x-for="(item, childIndex) in submenu" :key="childIndex">
            <li role="none">
              <template x-if="item.links && item.links.length > 0">
                <button
                  @click="openLevel(3, item.title, currentParentIndex, null, null, childIndex)"
                  class="menu-drawer__button menu-drawer__button--has-submenu"
                  role="menuitem"
                  aria-haspopup="true"
                  aria-expanded="false"
                >
                  <span x-text="item.title"></span>
                  <svg class="icon" viewBox="0 0 24 24" aria-hidden="true">
                    <path d="M8 4l8 8-8 8"></path>
                  </svg>
                </button>
              </template>
              <template x-if="!item.links || item.links.length === 0">
                <a :href="item.url" class="menu-drawer__link" role="menuitem" x-text="item.title"></a>
              </template>
            </li>
          </template>
        </ul>
      </section>
      <section
        :class="{'menu-drawer__level': true, 'active': currentLevel >= 3}"
        id="menu-drawer-level-3"
        aria-labelledby="menu-drawer-heading-3"
      >
        <header class="menu-drawer__header">
          <button @click="backLevel()" class="menu-drawer__back" aria-label="Back to previous menu">
            <svg class="icon" viewBox="0 0 24 24" aria-hidden="true">
              <path d="M16 4l-8 8 8 8"></path>
            </svg>
            <span>Back</span>
          </button>
          <h2 class="menu-drawer__heading" id="menu-drawer-heading-3" x-text="subMenuTitle"></h2>
        </header>
        <ul class="menu-drawer__menu" role="menu">
          <template x-for="(item, index) in subSubmenu" :key="index">
            <li role="none">
              <a :href="item.url" class="menu-drawer__link" role="menuitem" x-text="item.title"></a>
            </li>
          </template>
        </ul>
      </section>
    </div>
  </nav>
</aside>
<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('menuDrawer', () => ({
      isOpen: false,
      currentLevel: 1,
      menuTitle: '',
      subMenuTitle: '',
      submenu: [],
      subSubmenu: [],
      menuData: [],
      currentParentIndex: 0,
      featuredImageUrl: '',
      featuredImageAlt: '',
      imageLoaded: false,
      isImageLoading: false,

      init() {
        const headerHeight = document.querySelector('header')?.offsetHeight || 60;
        document.documentElement.style.setProperty('--header-height', `${headerHeight}px`);

        this.menuData = [
          {% for link in linklists['main-menu'].links %}
            {
              title: "{{ link.title | escape }}",
              url: "{{ link.url | escape }}",
              featuredImage: "{{ link.object.featured_image | image_url: '1200x' }}",
              featuredImageAlt: "{{ link.object.featured_image.alt | escape }}",
              links: [
                {% for childlink in link.links %}
                  {
                    title: "{{ childlink.title | escape }}",
                    url: "{{ childlink.url | escape }}",
                    links: [
                      {% for grandchildlink in childlink.links %}
                        {
                          title: "{{ grandchildlink.title | escape }}",
                          url: "{{ grandchildlink.url | escape }}"
                        }{% unless forloop.last %},{% endunless %}
                      {% endfor %}
                    ]
                  }{% unless forloop.last %},{% endunless %}
                {% endfor %}
              ]
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ];

        window.toggleNav = () => {
          this.isOpen ? this.closeMenu() : this.openMenu();
        };
      },

      openMenu() {
        this.isOpen = true;
        this.currentLevel = 1;
        document.body.classList.add('menu-open');
      },

      closeMenu() {
        this.isOpen = false;
        document.body.classList.remove('menu-open');
      },

      openLevel(level, title, parentIndex, featuredImage, featuredImageAlt, childIndex) {
        const previousLevel = this.currentLevel;
        
        const isSameLevel2Item = level === 2 && this.currentLevel === 2 && this.currentParentIndex === parentIndex;
        
        this.currentLevel = level;

        if (level === 2) {
          this.menuTitle = title;
          this.currentParentIndex = parentIndex;
          this.submenu = this.menuData[parentIndex].links;
          
          if (!isSameLevel2Item) {
            const prevUrl = this.featuredImageUrl;
            const newUrl = featuredImage || (this.menuData[parentIndex] ? this.menuData[parentIndex].featuredImage : '');
            
            if (prevUrl !== newUrl) {
              this.isImageLoading = true;
              this.imageLoaded = false;

              if (featuredImage) {
                this.featuredImageUrl = featuredImage;
                this.featuredImageAlt = featuredImageAlt || title;
              } 

              else if (this.menuData[parentIndex]) {
                this.featuredImageUrl = this.menuData[parentIndex].featuredImage;
                this.featuredImageAlt = this.menuData[parentIndex].featuredImageAlt || title;
              }
            }
          }
        } else if (level === 3) {
          this.subMenuTitle = title;
          this.subSubmenu = this.menuData[this.currentParentIndex].links[childIndex].links;
        }
      },

      backLevel() {
        if (this.currentLevel > 1) {
          this.currentLevel--;
          
          if (this.currentLevel === 1) {
            this.featuredImageUrl = '';
            this.featuredImageAlt = '';
          }
        }
      },
      
      generateSrcset(baseUrl) {
        if (!baseUrl) return '';
        
        const urlParts = baseUrl.split('_1200x');
        if (urlParts.length !== 2) return baseUrl;
        
        const baseUrlWithoutSize = urlParts[0];
        const extension = urlParts[1];
        
        return [
          `${baseUrlWithoutSize}_400x${extension} 400w`,
          `${baseUrlWithoutSize}_800x${extension} 800w`,
          `${baseUrlWithoutSize}_1200x${extension} 1200w`
        ].join(', ');
      }
    }));
  });
</script>
