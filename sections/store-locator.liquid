{{ 'leaflet.css' | asset_url | stylesheet_tag }}
<script src="{{ 'leaflet.min.js' | asset_url }}" defer></script>

<style>
  .store-locator {
    border-top: 1px solid var(--neutral-200);
    padding-top: var(--space-m);
  }

  #map {
    height: 400px;
    filter: grayscale(100%);
  }

  .store-locator__container {
    display: flex;
    flex-direction: column-reverse;
    border-top: 1px solid var(--neutral-200);
  }

  .store-locator__map {
    flex: 1;
  }

  .store-locator__sidebar {
    width: 100%;
    overflow-y: auto;
    max-height: 400px;
    border-top: 1px solid var(--neutral-200);
  }

  .store-locator__filters {
    display: flex;
    flex-direction: column;
    margin-bottom: var(--space-m);
    padding: 0 var(--space-m);
  }

  .store-locator__search {
    width: 100%;
    border: none;
    border-bottom: 1px solid var(--neutral-200);
    background: transparent;
    color: var(--neutral-950);
    padding: var(--space-s) 0;
    transition: border-color 0.3s ease;
  }

  .store-locator__search:focus {
    outline: none;
    border-bottom-color: var(--neutral-950);
    background-color: transparent;
  }

  .store-locator__search::placeholder {
    color: var(--neutral-400);
  }

  .store-locator__state-select {
    position: relative;
    width: 100%;
    border: none;
    border-bottom: 1px solid var(--neutral-200);
    background: transparent;
    color: var(--neutral-950);
    padding: var(--space-s) 0;
    cursor: pointer;
    transition: border-color 0.3s ease;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    border-radius: 0;
    -webkit-border-radius: 0;
    background-image: url("data:image/svg+xml,%3Csvg width='12' height='7' viewBox='0 0 12 7' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M1 1L6 6L11 1' stroke='%23616161' stroke-linecap='square'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 0 center;
    background-size: 12px 7px;
    padding-right: var(--space-s);
  }

  .store-locator__state-select:focus {
    outline: none;
    border-bottom-color: var(--neutral-950);
    background-color: transparent;
  }

  .store-locator__state-select option {
    background-color: var(--white);
    color: var(--neutral-950);
    padding: var(--space-xs);
  }

  .location-item {
    padding: var(--space-m);
    border-bottom: 1px solid var(--neutral-200);
  }

  .location-item__header {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
    margin-bottom: var(--space-s);
  }

  .location-item__status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: var(--green-400);
    flex-shrink: 0;
  }

  .location-item__status-dot--closed {
    background-color: #ff0000;
  }

  .location-item__title {
    margin: 0;
  }

  .location-item__address {
    margin-bottom: var(--space-xs);
  }

  .location-item__contact {
    margin-bottom: var(--space-xs);
  }

  .location-item__hours {
    margin-bottom: var(--space-xs);
  }

  .location-item a {
    color: var(--neutral-950);
  }

  .no-results-message {
  }

  @media screen and (min-width: 1000px) {
    #map {
      height: 900px;
    }

    .store-locator__container {
      flex-direction: row;
      gap: 0;
    }

    .store-locator__sidebar {
      width: 500px;
      max-height: 900px;
      border-top: none;
    }

    .store-locator__filters {
      flex-direction: row;
      align-items: center;
      gap: var(--space-m);
    }

    .store-locator__state-select {
      width: 200px;
    }
  }
</style>

<div class="store-locator" x-data="storeLocator()">
  <h1 class="heading--xl" style="padding: 0 var(--space-m);">{{ section.settings.heading }}</h1>

  <div class="store-locator__filters">
    <input
      type="text"
      x-model="searchTerm"
      @input="filterLocations"
      class="store-locator__search body"
      placeholder="Search by name, address or state"
    >
    <select x-model="selectedState" @change="filterLocations" class="store-locator__state-select body">
      <option value="" selected>All</option>
      <option value="WA">WA</option>
      <option value="SA">SA</option>
      <option value="QLD">QLD</option>
      <option value="NSW">NSW</option>
      <option value="VIC">VIC</option>
      <option value="ACT">ACT</option>
    </select>
  </div>

  <div class="store-locator__container">
    <div class="store-locator__sidebar custom-scrollbar">
      <div x-show="showNoResults" class="location-item">
        <p class="body">
          Sorry, your search for "<span x-text="searchTerm"></span>" returned zero results, please try another search
          term.
        </p>
      </div>
      {% paginate metaobjects.locations.values by 200 %}
        {% for location in metaobjects.locations.values %}
          <div
            class="location-item"
            x-show="isLocationVisible('{{ location.location_name.value }}', '{{ location.street_address.value | default: '' }}', '{{ location.location_state.value | default: '' }}')"
            data-lat="{{ location.latitude.value }}"
            data-lng="{{ location.longitude.value }}"
            data-state="{{ location.location_state.value }}"
            data-hours="{{ location.opening_hours.value }}"
            data-location-url="{{ location.location_page.value.url }}"
          >
            <div class="location-item__header">
              <div
                class="location-item__status-dot"
                data-location-status="{{ location.location_name.value | handleize }}"
              ></div>
              <h3 class="location-item__title heading--xl">{{ location.location_name.value }}</h3>
            </div>

            <div class="location-item__address body">
              <a target="_blank" href="{{ location.google_maps_link.value }}">{{ location.street_address.value }}</a>
            </div>

            <div class="location-item__contact body">
              <a href="mailto:{{ location.email_address.value }}">{{ location.email_address.value }}</a> |
              <a href="tel:{{ location.phone_number.value }}">{{ location.phone_number.value }}</a>
            </div>

            <div class="location-item__hours body">
              <strong>Open Today:</strong>
              <span data-today-hours="{{ location.location_name.value | handleize }}">
                {{- location.opening_hours.value -}}
              </span>
            </div>
            <div class="location-item__link body">
              <a href="{{ location.location_page.value.url }}">View Store Information</a>
            </div>
          </div>
        {% endfor %}
      {% endpaginate %}
    </div>
    <div class="store-locator__map">
      <div id="map"></div>
    </div>
  </div>
</div>

<script>
  function storeLocator() {
    return {
      searchTerm: '',
      selectedState: '',
      markers: [],
      map: null,
      timezoneHandler: null,
      showNoResults: false,
      
      init() {
        const urlParams = new URLSearchParams(window.location.search);
        const querySearch = urlParams.get('search');
        if (querySearch) {
          this.searchTerm = querySearch;
          this.selectedState = '';
        }
        
        const queryState = urlParams.get('state');
        const storedState = sessionStorage.getItem('selectedState');
        
        if (!querySearch) {
          if (queryState && ['WA', 'NT', 'SA', 'QLD', 'NSW', 'VIC', 'ACT', 'TAS', ''].includes(queryState)) {
            this.selectedState = queryState;
            sessionStorage.setItem('selectedState', queryState);
          } else if (storedState && ['WA', 'NT', 'SA', 'QLD', 'NSW', 'VIC', 'ACT', 'TAS', ''].includes(storedState)) {
            this.selectedState = storedState;
          }
        }
        
        this.timezoneHandler = new ShopifyTimezoneHandler();
        
        this.$nextTick(() => {
          this.waitForLeafletAndInit();
        });
      },
      
      waitForLeafletAndInit() {
        if (typeof L !== 'undefined') {
          this.initMap();
          this.filterLocations();
          this.updateAllLocationTimes();
          setInterval(() => this.updateAllLocationTimes(), 60000);
        } else {
          setTimeout(() => this.waitForLeafletAndInit(), 50);
        }
      },
      
      initMap() {
        this.map = L.map('map').setView([-25.2744, 133.7751], 5);
  
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: 'Â© OpenStreetMap contributors',
          maxZoom: 18
        }).addTo(this.map);
  
        var storeIcon = L.icon({
          iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
          shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
          iconSize: [25, 41],
          iconAnchor: [12, 41],
          popupAnchor: [1, -34],
          shadowSize: [41, 41]
        });
  
        {% paginate metaobjects.locations.values by 200 %}
        {% for location in metaobjects.locations.values %}
          {% if location.latitude.value and location.longitude.value %}
            var locationUrl = '{{ location.location_page.value.url }}';
            var marker = L.marker([{{ location.latitude.value }}, {{ location.longitude.value }}], {icon: storeIcon})
              .bindPopup(`
                <div class="location-item__header">
                  <h3 class="location-item__title heading--xl">{{ location.location_name.value }}</h3>
                </div>
                <div class="location-item__address body">
                  <a href="{{ location.google_maps_link.value }}">{{ location.street_address.value }}</a>
                </div>
                <div class="location-item__contact body">
                  <a href="mailto:{{ location.email_address.value }}">{{ location.email_address.value }}</a><br>
                  <a href="tel:{{ location.phone_number.value }}">{{ location.phone_number.value }}</a>
                </div>
                <div class="location-item__hours body">
                  <a href="${locationUrl}">View Location Details</a>
                </div>
              `);
            marker.locationData = {
              name: '{{ location.location_name.value }}',
              address: '{{ location.street_address.value | default: '' }}',
              state: '{{ location.location_state.value | default: '' }}'
            };
            this.markers.push(marker);
            marker.addTo(this.map);
          {% endif %}
        {% endfor %}
      {% endpaginate %}
      },
      
      isLocationVisible(name, address, state) {
        const searchLower = this.searchTerm.toLowerCase();
        const matchesSearch = !this.searchTerm || 
          name.toLowerCase().includes(searchLower) ||
          address.toLowerCase().includes(searchLower) ||
          state.toLowerCase().includes(searchLower);
        
        const matchesState = !this.selectedState || state === this.selectedState;
        
        return matchesSearch && matchesState;
      },
      
      filterLocations() {
        sessionStorage.setItem('selectedState', this.selectedState);
        
        this.markers.forEach(marker => {
          const data = marker.locationData;
          if (this.isLocationVisible(data.name, data.address, data.state)) {
            marker.addTo(this.map);
          } else {
            marker.remove();
          }
        });
        
        this.updateNoResultsState();
        this.updateAllLocationTimes();
      },
      
      updateNoResultsState() {
        if (!this.searchTerm) {
          this.showNoResults = false;
          return;
        }
        
        const locations = document.querySelectorAll('.location-item[data-lat]');
        let hasVisibleLocations = false;
        
        locations.forEach(item => {
          const name = item.querySelector('.location-item__title').textContent;
          const addressElement = item.querySelector('.location-item__address a');
          const address = addressElement ? addressElement.textContent : '';
          const state = item.getAttribute('data-state') || '';
          
          if (this.isLocationVisible(name, address, state)) {
            hasVisibleLocations = true;
          }
        });
        
        this.showNoResults = !hasVisibleLocations;
      },
      
      updateAllLocationTimes() {
        const locationItems = document.querySelectorAll('.location-item[data-state]');
        locationItems.forEach(item => {
          const state = item.getAttribute('data-state');
          const hours = item.getAttribute('data-hours');
          
          if (state && hours) {
            const timeData = this.timezoneHandler.getStateTime(state);
            const openingStatus = this.timezoneHandler.checkOpeningStatus(timeData, hours);
            
            const statusDot = item.querySelector('.location-item__status-dot');
            if (statusDot && openingStatus) {
              if (openingStatus.isOpen) {
                statusDot.classList.remove('location-item__status-dot--closed');
              } else {
                statusDot.classList.add('location-item__status-dot--closed');
              }
            }
            
            const todayHoursElement = item.querySelector('[data-today-hours]');
            if (todayHoursElement && openingStatus) {
              todayHoursElement.textContent = openingStatus.hours || 'Hours not available';
            }
          }
        });
      }
    }
  }
  
  class ShopifyTimezoneHandler {
    constructor() {
      this.timezones = {
        NSW: 'Australia/Sydney',
        VIC: 'Australia/Melbourne',
        QLD: 'Australia/Brisbane',
        SA: 'Australia/Adelaide',
        WA: 'Australia/Perth',
        TAS: 'Australia/Hobart',
        NT: 'Australia/Darwin',
        ACT: 'Australia/Sydney',
      };
      this.dstStates = ['NSW', 'VIC', 'SA', 'TAS', 'ACT'];
    }
  
    getStateTime(state) {
      if (!this.timezones[state]) {
        console.error(`Unknown state: ${state}`);
        return null;
      }
  
      const timezone = this.timezones[state];
      const now = new Date();
  
      const formatter = new Intl.DateTimeFormat('en-AU', {
        timeZone: timezone,
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        hour12: false,
        weekday: 'long',
      });
  
      const parts = formatter.formatToParts(now);
      const timeData = {};
      parts.forEach((part) => (timeData[part.type] = part.value));
  
      const offsetFormatter = new Intl.DateTimeFormat('en', {
        timeZone: timezone,
        timeZoneName: 'longOffset',
      });
      const currentOffset = offsetFormatter.formatToParts(now).find((part) => part.type === 'timeZoneName').value;
  
      const isDSTActive = this.isDSTActive(timezone, now);
  
      return {
        state: state,
        time: `${timeData.hour}:${timeData.minute}`,
        day: timeData.weekday,
        date: `${timeData.day}/${timeData.month}/${timeData.year}`,
        offset: currentOffset,
        isDST: isDSTActive,
        observesDST: this.dstStates.includes(state),
      };
    }
  
    isDSTActive(timezone, date = new Date()) {
      const january = new Date(date.getFullYear(), 0, 15);
      const july = new Date(date.getFullYear(), 6, 15);
  
      const janOffset = this.getOffset(timezone, january);
      const julOffset = this.getOffset(timezone, july);
      const currentOffset = this.getOffset(timezone, date);
  
      return janOffset !== julOffset && currentOffset === janOffset;
    }
  
    getOffset(timezone, date) {
      return new Intl.DateTimeFormat('en', {
        timeZone: timezone,
        timeZoneName: 'longOffset',
      })
        .formatToParts(date)
        .find((part) => part.type === 'timeZoneName').value;
    }
  
    checkOpeningStatus(timeData, openingHours) {
      if (!timeData || !openingHours) return null;
  
      const hoursLines = openingHours.split('\n');
      const currentDay = timeData.day;
      const currentTime = timeData.time;
  
      for (let line of hoursLines) {
        if (line.includes(currentDay)) {
          const parts = line.split(': ');
          if (parts.length < 2) continue;
  
          const todayHours = parts[1].trim();
  
          if (todayHours === 'Closed') {
            return {
              isOpen: false,
              status: 'Closed today',
              hours: todayHours,
            };
          }
  
          const timeRange = todayHours.split(' - ');
          if (timeRange.length !== 2) continue;
  
          const [openTime, closeTime] = timeRange;
  
          const currentMinutes = this.timeToMinutes(currentTime);
          const openMinutes = this.timeToMinutes(openTime);
          const closeMinutes = this.timeToMinutes(closeTime);
  
          const isOpen = currentMinutes >= openMinutes && currentMinutes <= closeMinutes;
  
          return {
            isOpen: isOpen,
            status: isOpen ? `Open until ${closeTime}` : `Closed (opens at ${openTime})`,
            hours: todayHours,
            openTime: openTime,
            closeTime: closeTime,
          };
        }
      }
  
      return {
        isOpen: false,
        status: 'Hours not available',
        hours: 'Unknown',
      };
    }
  
    timeToMinutes(timeStr) {
      const [hours, minutes] = timeStr.split(':').map(Number);
      return hours * 60 + minutes;
    }
  }
</script>

{% schema %}
{
  "name": "Store Locator",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Store Locations"
    }
  ],
  "presets": [
    {
      "name": "Store Locator",
      "settings": {
        "heading": "Store Locations"
      }
    }
  ],
  "enabled_on": {
    "templates": ["page"]
  }
}
{% endschema %}
