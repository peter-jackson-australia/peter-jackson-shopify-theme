<style>
  .recently-viewed {
    position: relative;
    padding: var(--space-2xl) 0;
    border-top: 1px solid var(--neutral-50);
  }

  .recently-viewed::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
  }

  .recently-viewed__header {
    margin-bottom: var(--space-m);
    padding-left: var(--space-m);
  }

  .recently-viewed__grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: var(--space-2xs);
  }

  .product-card {
    display: block;
    position: relative;
    height: 100%;
    overflow: hidden;
  }

  .product-card__image-link {
    display: block;
  }

  .product-card__image-wrapper {
    position: relative;
    width: 100%;
    overflow: hidden;
    background-color: var(--neutral-50);
  }

  .product-card__discount-code-mobile {
    display: none;
    color: var(--neutral-400);
  }

  .product-card__image {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .product-card__image--first {
    transition: opacity 0.3s ease;
  }

  .product-card__image--second {
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .product-card__image-wrapper:hover .product-card__image--first {
    opacity: 0;
  }

  .product-card__image-wrapper:hover .product-card__image--second {
    opacity: 1;
  }

  .product-card__content {
    padding: var(--space-xs) var(--space-m);
    display: flex;
    flex-direction: column;
    gap: var(--space-2xs);
  }

  .product-card__title {
    color: var(--neutral-950);
  }

  .product-card__title-link {
    text-decoration: none;
  }

  .product-card__material {
    color: var(--neutral-600);
  }

  .product-card__title,
  .product-card__material,
  .product-card__price {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .product-card__price {
    margin-top: auto;
  }

  .product-card__slider-wrapper {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
    background-color: var(--neutral-50);
  }

  .product-card__image-wrapper[x-data]:hover > div:first-child {
    opacity: 0;
  }

  .product-card__slider {
    width: 100%;
    height: auto;
  }

  .product-card__slider .splide__track,
  .product-card__slider .splide__list,
  .product-card__slider .splide__slide {
    height: auto;
  }

  .product-card__slider .splide__slide img {
    width: 100%;
    height: auto;
  }

  .product-card__slider .splide__arrows {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
    pointer-events: none;
  }

  .product-card__slider .splide__arrow {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    pointer-events: auto;
    cursor: pointer;
    width: var(--space-l);
    height: 100%;
  }

  .product-card__slider .splide__arrow--prev {
    left: var(--space-3xs);
  }

  .product-card__slider .splide__arrow--next {
    right: var(--space-3xs);
  }

  .product-card__slider .splide__arrow:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  .product-card__slider .splide__progress {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background: transparent;
    z-index: 2;
  }

  .product-card__slider .splide__progress__bar {
    background: var(--neutral-950);
    height: 2px;
    transition: width 300ms ease;
    width: 0;
  }

  .product-card__price--compare {
    text-decoration: line-through;
    color: var(--neutral-600);
    margin-left: var(--space-2xs);
  }

  @media (max-width: 768px) {
    .recently-viewed {
      margin-top: var(--space-xl);
    }
    .recently-viewed__grid {
      grid-template-columns: repeat(1, 1fr);
    }
    .product-card__discount-code-mobile {
      display: block;
    }
  }
</style>

<div
  id="recently-viewed"
  class="recently-viewed section-wrap"
>
  <div class="section">
    <h2 class="recently-viewed__header heading--xl">{{ section.settings.heading }}</h2>
    <div id="js--recently_viewed" class="recently-viewed__grid"></div>
  </div>
</div>

<script>
/*
* GET RECENTLY VIEWED ITEMS
* Returns list of recently viewed items from local storage.
*/
function _getRecentlyViewed() {
  let recentlyViewed = localStorage.getItem("recentlyViewed");
  let items = JSON.parse(recentlyViewed);
  if (items !== null && items[0] !== undefined) {
    let sortedItems = items.sort(function(a, b) {
      return a.timestamp - b.timestamp;
    });
    return sortedItems;
  } else {
    return [];
  }
};

/*
* SAVE RECENTLY VIEWED ITEM
* Saves item to local storage data.
* @param $handle (string) - Product handle
*/
function saveRecentlyViewedProduct(handle) {
  let recentlyViewed = _getRecentlyViewed();
  let exists = false;
  let maxItemsToSave = 4;
  recentlyViewed.forEach(function(item, index) {
    if (item.handle == handle) {
      exists = true;
    }
  });

  if (exists === false) {
    recentlyViewed.splice(maxItemsToSave);
    recentlyViewed.unshift({
      handle: handle,
      date: Date.now(),
    });
    localStorage.setItem("recentlyViewed", JSON.stringify(recentlyViewed));
  }

  _getRecentlyViewed();
};

/*
* DISPLAYS RECENTLY VIEWED ITEMS
* Displays the items on the page. This looks for .js--recently_viewed.
*/
function displayRecentlyViewed() {
  let items = _getRecentlyViewed();
  const limit = 4; 
  const el = document.getElementById("js--recently_viewed");
  if (document.getElementById("recently-viewed") != null) {
    if (items.length > 0) {
      items.forEach(function(item, index) {
        if ((index + 1) <= limit) {
          let url = `/products/${item.handle}?view=card`;
          fetch(url, {
              method: "GET",
              redirect: "error",
            })
            .then(function(response) {
              if (response.status == 200) {
                return response.text();
              } else {
                let cleanUpArray = items.filter((i) => i.handle != item.handle);
                localStorage.setItem("recentlyViewed", JSON.stringify(cleanUpArray));
                return "";
              }
            })
            .then(function(card) {
              el.insertAdjacentHTML("beforeend", card);
            })
            .catch(function(error) {
              let cleanUpArray = items.filter((i) => i.handle != item.handle);
              localStorage.setItem("recentlyViewed", JSON.stringify(cleanUpArray));
            });
        }
      });
    } else {
      document.getElementById("recently-viewed").style.display = "none";
    }
  }
};

var ready = (callback) => {
  if (document.readyState != 'loading') callback();
  else document.addEventListener('DOMContentLoaded', callback);
};

ready(function() {
  displayRecentlyViewed();
  {% if template.name == "product" -%}
  saveRecentlyViewedProduct('{{ product.handle }}');
  {%- endif -%}
  
  document.addEventListener(
    'click',
    function (event) {
      if (event.target.closest('.splide__arrow')) {
        event.preventDefault();
      }
    },
    true
  );
});
</script>

{% schema %}
{
  "name": "Recently Viewed",
  "tag": "section",
  "class": "recently-viewed-section",
  "limit": 1,
  "presets": [
    {
      "name": "Recently Viewed"
    }
  ],
  "settings": [
    {
      "type": "inline_richtext",
      "id": "heading",
      "label": "Heading",
      "default": "Recently Viewed"
    }
  ],
  "enabled_on": {
    "templates": ["product"]
  }
}
{% endschema %}
