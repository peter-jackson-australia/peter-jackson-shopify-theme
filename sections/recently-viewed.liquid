{% liquid
# This section must be added to the PDP for the recently viewed feature
# to work correctly.
assign image_width = 400
%}
<style>
#recently-viewed.section-wrap:before {
  background-color:{{ section.settings.background | default: '#ffffff' }}
}
#recently-viewed .products-grid {
  grid-template-columns: repeat({{ section.settings.products_per_row }}, 1fr);
}
</style>

<section id="recently-viewed" class="section-wrap" style="color:{{ section.settings.color | default:'inherit' }};">
  <div class="section">
    <{{ section.settings.size }} data-title="{{ section.settings.heading }}">
      {{ section.settings.heading }}
    </{{ section.settings.size }}>
    <div id="js--recently_viewed" class="products-grid"></div>
  </div>
</section>

<script>
/*
* GET RECENTLY VIEWED ITEMS
* Returns list of recently viewed items from local storage.
*/
function _getRecentlyViewed() {
  let recentlyViewed = localStorage.getItem("recentlyViewed");
  let items = JSON.parse(recentlyViewed);
  // console.log(items);
  if (items !== null && items[0] !== undefined) {
    let sortedItems = items.sort(function(a, b) {
      return a.timestamp - b.timestamp;
    });
    return sortedItems;
  } else {
    return [];
  }
};

/*
* SAVE RECENTLY VIEWED ITEM
* Saves item to local storage data.
* @param $handle (string) - Product handle
*/
function saveRecentlyViewedProduct(handle) {
  let recentlyViewed = _getRecentlyViewed();
  let exists = false;
  let maxItemsToSave = 8;
  recentlyViewed.forEach(function(item, index) {
    if (item.handle == handle) {
      exists = true;
    }
  });

  if (exists === false) {
    // Trim the array
    recentlyViewed.splice(maxItemsToSave);
    // Append the new data to the recentlyViewed array
    recentlyViewed.unshift({
      handle: handle,
      date: Date.now(),
    });
    // Re-save the updated data back to local storage
    localStorage.setItem("recentlyViewed", JSON.stringify(recentlyViewed));
  }

  // Reload the recentlyViewed list
  _getRecentlyViewed();
};

/*
* DISPLAYS RECENTLY VIEWED ITEMS
* Displays the items on the page. This looks for .js--recently_viewed.
*/
function displayRecentlyViewed() {
  let items = _getRecentlyViewed();
  const limit = {{ section.settings.limit }};
  const el = document.getElementById("js--recently_viewed");
  if (document.getElementById("recently-viewed") != null) {
    if (items.length > 0) {
      items.forEach(function(item, index) {
        if ((index + 1) <= limit) {
          let url = `/products/${item.handle}?view=card`;
          fetch(url, {
              method: "GET",
              redirect: "error",
            })
            .then(function(response) {
              if (response.status == 200) {
                return response.text();
              } else {
                // Remove this item from the array.
                let cleanUpArray = items.filter((i) => i.handle != item.handle);
                localStorage.setItem("recentlyViewed", JSON.stringify(cleanUpArray));
                return "";
              }
            })
            .then(function(card) {
              el.insertAdjacentHTML("beforeend", card);
            })
            .catch(function(error) {
              // Remove this item from the array.
              let cleanUpArray = items.filter((i) => i.handle != item.handle);
              localStorage.setItem("recentlyViewed", JSON.stringify(cleanUpArray));
            });
        }
      });
    } else {
      document.getElementById("recently-viewed").style.display = "none";
    }
  }
};
ready(function() {
  displayRecentlyViewed();
  {% if template.name == "product" -%}
  saveRecentlyViewedProduct('{{ product.handle }}');
  {%- endif -%}
});
</script>

{% schema %}
{
  "name": "Recently Viewed",
  "tag": "section",
  "class": "recently-viewed-section",
  "limit": 1,
  "disabled_on": {
    "groups": ["header"]
  },
  "presets": [
    {
      "name": "Recently Viewed"
    }
  ],
  "settings": [
    {
      "type": "inline_richtext",
      "id": "heading",
      "label": "Text",
      "default": "Recently viewed",
    },
    {
      "type": "select",
      "id": "size",
      "label": "Size",
      "options": [
        {
          "value": "h1",
          "label": "H1"
        },
        {
          "value": "h2",
          "label": "H2"
        },
        {
          "value": "h3",
          "label": "H3"
        }
      ],
      "default": "h2"
    },
    {
      "type": "range",
      "id": "limit",
      "label": "Products",
      "info": "Number of products displayed.",
      "min": 4,
      "max": 8,
      "step": 1,
      "default": 4
    },
    {
      "type": "range",
      "id": "products_per_row",
      "label": "Products Per Row",
      "info": "Number of products per row.",
      "min": 1,
      "max": 4,
      "step": 1,
      "default": 4
    },
    {
      "type": "header",
      "content": "Section Settings"
    },
    {
      "type": "color",
      "id": "background",
      "label": "Background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "color",
      "label": "Text Colour"
    }
  ]
}
{% endschema %}
