{% liquid
  # This section must be added to the PDP for the recently viewed feature
  # to work correctly.
  assign image_width = 400
%}

<style>
  .recently-viewed {
    position: relative;
  }

  .recently-viewed::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: {{ section.settings.background | default: '#ffffff' }};
    z-index: -1;
  }

  .recently-viewed__header {
    margin-bottom: var(--space-m);
  }

  .recently-viewed__grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: var(--space-2xs);
  }

  /* Inheriting product card styles from the main collection page */
  .recently-viewed__card {
    display: block;
    position: relative;
    height: 100%;
    overflow: hidden;
  }

  .recently-viewed__card-image-link {
    display: block;
  }

  .recently-viewed__card-image-wrapper {
    position: relative;
    width: 100%;
    overflow: hidden;
    background-color: var(--neutral-50);
    contain: paint;
  }

  .recently-viewed__card-image {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .recently-viewed__card-content {
    padding: var(--space-xs) var(--space-m);
    display: flex;
    flex-direction: column;
    gap: var(--space-2xs);
  }

  .recently-viewed__card-title {
    color: var(--neutral-950);
  }

  .recently-viewed__card-title-link {
    text-decoration: none;
  }

  .recently-viewed__card-material {
    color: var(--neutral-600);
  }

  .recently-viewed__card-title,
  .recently-viewed__card-material,
  .recently-viewed__card-price {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .recently-viewed__card-price {
    margin-top: auto;
  }

  .recently-viewed__card-price--compare {
    text-decoration: line-through;
    color: var(--neutral-600);
    margin-left: var(--space-2xs);
  }

  @media (max-width: 768px) {
    .recently-viewed__grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
</style>

<section
  id="recently-viewed"
  class="recently-viewed section-wrap"
  style="color:{{ section.settings.color | default:'inherit' }};"
>
  <div class="section">
    <h2 class="recently-viewed__header heading--2xl">{{ section.settings.heading }}</h2>
    <div id="js--recently_viewed" class="recently-viewed__grid"></div>
  </div>
</section>

<script>
/*
* GET RECENTLY VIEWED ITEMS
* Returns list of recently viewed items from local storage.
*/
function _getRecentlyViewed() {
  let recentlyViewed = localStorage.getItem("recentlyViewed");
  let items = JSON.parse(recentlyViewed);
  console.log(items);
  if (items !== null && items[0] !== undefined) {
    let sortedItems = items.sort(function(a, b) {
      return a.timestamp - b.timestamp;
    });
    return sortedItems;
  } else {
    return [];
  }
};

/*
* SAVE RECENTLY VIEWED ITEM
* Saves item to local storage data.
* @param $handle (string) - Product handle
*/
function saveRecentlyViewedProduct(handle) {
  let recentlyViewed = _getRecentlyViewed();
  let exists = false;
  let maxItemsToSave = 4;
  recentlyViewed.forEach(function(item, index) {
    if (item.handle == handle) {
      exists = true;
    }
  });

  if (exists === false) {
    // Trim the array
    recentlyViewed.splice(maxItemsToSave);
    // Append the new data to the recentlyViewed array
    recentlyViewed.unshift({
      handle: handle,
      date: Date.now(),
    });
    // Re-save the updated data back to local storage
    localStorage.setItem("recentlyViewed", JSON.stringify(recentlyViewed));
  }

  // Reload the recentlyViewed list
  _getRecentlyViewed();
};

/*
* DISPLAYS RECENTLY VIEWED ITEMS
* Displays the items on the page. This looks for .js--recently_viewed.
*/
function displayRecentlyViewed() {
  let items = _getRecentlyViewed();
  const limit = 4; // Hard-coded to always show 4 items
  const el = document.getElementById("js--recently_viewed");
  if (document.getElementById("recently-viewed") != null) {
    if (items.length > 0) {
      items.forEach(function(item, index) {
        if ((index + 1) <= limit) {
          let url = `/products/${item.handle}?view=card`;
          fetch(url, {
              method: "GET",
              redirect: "error",
            })
            .then(function(response) {
              if (response.status == 200) {
                return response.text();
              } else {
                // Remove this item from the array.
                let cleanUpArray = items.filter((i) => i.handle != item.handle);
                localStorage.setItem("recentlyViewed", JSON.stringify(cleanUpArray));
                return "";
              }
            })
            .then(function(card) {
              el.insertAdjacentHTML("beforeend", card);
            })
            .catch(function(error) {
              // Remove this item from the array.
              let cleanUpArray = items.filter((i) => i.handle != item.handle);
              localStorage.setItem("recentlyViewed", JSON.stringify(cleanUpArray));
            });
        }
      });
    } else {
      document.getElementById("recently-viewed").style.display = "none";
    }
  }
};

var ready = (callback) => {
  if (document.readyState != 'loading') callback();
  else document.addEventListener('DOMContentLoaded', callback);
};

ready(function() {
  displayRecentlyViewed();
  {% if template.name == "product" -%}
  saveRecentlyViewedProduct('{{ product.handle }}');
  {%- endif -%}
});
</script>

{% schema %}
{
  "name": "Recently Viewed",
  "tag": "section",
  "class": "recently-viewed-section",
  "limit": 1,
  "disabled_on": {
    "groups": ["header"]
  },
  "presets": [
    {
      "name": "Recently Viewed"
    }
  ],
  "settings": [
    {
      "type": "inline_richtext",
      "id": "heading",
      "label": "Heading",
      "default": "Recently viewed"
    },
    {
      "type": "header",
      "content": "Section Settings"
    },
    {
      "type": "color",
      "id": "background",
      "label": "Background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "color",
      "label": "Text Colour"
    }
  ]
}
{% endschema %}
