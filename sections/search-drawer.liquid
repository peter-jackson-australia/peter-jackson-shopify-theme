<style>
  .search-drawer {
    position: fixed;
    top: 0;
    left: 0;
    opacity: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.6);
    z-index: 99999;
    display: flex;
    flex-direction: column;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s linear;
  }

  .search-drawer--active {
    left: 0;
    opacity: 1;
    visibility: visible;
  }

  .search-drawer__container {
    width: 400px;
    max-width: 100%;
    background-color: var(--white);
    flex: 1;
    margin-left: auto;
    display: flex;
    flex-direction: column;
    overflow: auto;
    opacity: 0;
    transform: translateX(100%);
    transition: transform 0.4s ease, opacity 0.3s linear;
  }

  .search-drawer--active .search-drawer__container {
    transform: translateX(0);
    opacity: 1;
  }

  .search-drawer__header {
    display: flex;
    align-items: center;
    height: var(--space-xl);
    padding: var(--space-m);
  }

  .search-drawer__title {
    color: var(--neutral-950);
    flex: 1;
  }

  .search-drawer__close {
    width: var(--space-s);
    color: var(--neutral-400);
    cursor: pointer;
    background: none;
    border: none;
  }

  .search-drawer__close:hover {
    color: var(--neutral-950);
  }

  .search-drawer__content {
    flex: 1;
    display: flex;
    flex-direction: column;
    padding: var(--space-m);
    padding-top: 0px;
  }

  .search-form {
    margin-bottom: var(--space-m);
  }

  .search-form__input {
    width: 100%;
    padding: var(--space-s);
    border: 1px solid var(--neutral-300);
    border-radius: 4px;
    font-size: 16px;
  }

  .search-form__input:focus {
    outline: none;
    border-color: var(--neutral-950);
  }

  .predictive-search {
    margin-bottom: var(--space-m);
  }

  .predictive-search__title {
    color: var(--neutral-950);
    margin-bottom: var(--space-s);
    font-size: 14px;
    font-weight: 600;
  }

  .predictive-search__results {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: var(--space-xs);
  }

  .predictive-search__item {
    margin: 0;
    padding: 0;
  }

  .predictive-search__link {
    color: var(--neutral-600);
    text-decoration: none;
    display: flex;
    align-items: center;
    gap: var(--space-s);
    padding: var(--space-xs);
    border-radius: 4px;
    transition: all 0.2s ease;
  }

  .predictive-search__link:hover {
    color: var(--neutral-950);
    background-color: var(--neutral-50);
  }

  .predictive-search__image {
    width: 40px;
    height: 40px;
    object-fit: cover;
    border-radius: 4px;
  }

  .predictive-search__text {
    flex: 1;
  }

  .predictive-search__search-button {
    width: 100%;
    padding: var(--space-s);
    background-color: var(--neutral-950);
    color: var(--white);
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-top: var(--space-s);
    transition: background-color 0.2s ease;
  }

  .predictive-search__search-button:hover {
    background-color: var(--neutral-800);
  }

  .popular-searches {
    margin-top: var(--space-m);
    margin-bottom: var(--space-m);
  }

  .popular-searches__title {
    color: var(--neutral-950);
    margin-bottom: var(--space-s);
  }

  .popular-searches__list {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: var(--space-xs);
  }

  .popular-searches__item {
    margin: 0;
    padding: 0;
  }

  .popular-searches__link {
    color: var(--neutral-600);
    text-decoration: none;
    display: block;
    transition: color 0.2s ease;
  }

  .popular-searches__link:hover {
    color: var(--neutral-950);
  }

  @media screen and (max-width: 768px) {
    .search-drawer {
      display: none;
    }
  }
</style>

<aside
  x-data="searchDrawer"
  x-init="init()"
  @keydown.escape.window="closeSearch()"
  class="search-drawer"
  role="dialog"
  aria-labelledby="search-title"
  @click="closeSearch()"
>
  <div class="search-drawer__container" @click.stop>
    <header class="search-drawer__header">
      <h2 id="search-title" class="search-drawer__title heading--xl">Search</h2>
      <button
        class="search-drawer__close"
        type="button"
        aria-label="Close search"
        @click="closeSearch()"
      >
        {% render '_icon-close' %}
      </button>
    </header>

    <div class="search-drawer__content">
      <form class="search-form" @submit.prevent="performSearch()">
        <input
          type="text"
          class="search-form__input"
          placeholder="Search products..."
          x-model="searchQuery"
          @input="handleSearchInput()"
          @focus="handleSearchInput()"
          autocomplete="off"
        >
      </form>

      <div
        class="predictive-search"
        x-show="searchQuery.length > 0 && predictiveResults"
        x-transition
      >
        <template x-if="predictiveResults && predictiveResults.products && predictiveResults.products.length > 0">
          <div>
            <h3 class="predictive-search__title">Products</h3>
            <ul class="predictive-search__results">
              <template x-for="product in predictiveResults.products" :key="product.id">
                <li class="predictive-search__item">
                  <a :href="product.url" class="predictive-search__link">
                    <img
                      :src="product.image"
                      :alt="product.title"
                      class="predictive-search__image"
                      loading="lazy"
                    >
                    <span class="predictive-search__text" x-text="product.title"></span>
                  </a>
                </li>
              </template>
            </ul>
          </div>
        </template>

        <template x-if="searchQuery.length > 0">
          <button
            type="button"
            class="predictive-search__search-button"
            @click="performSearch()"
            x-text="`Search for '${searchQuery}'`"
          ></button>
        </template>
      </div>

      {% assign popular_searches = '' %}
      {% assign popular_searches = popular_searches | append: section.settings.popular_search_1 | append: '|' %}
      {% assign popular_searches = popular_searches | append: section.settings.popular_search_2 | append: '|' %}
      {% assign popular_searches = popular_searches | append: section.settings.popular_search_3 | append: '|' %}
      {% assign popular_searches = popular_searches | append: section.settings.popular_search_4 %}
      {% assign popular_searches_array = popular_searches | split: '|' %}

      {% assign has_popular_searches = false %}
      {% for search_term in popular_searches_array %}
        {% unless search_term == blank %}
          {% assign has_popular_searches = true %}
          {% break %}
        {% endunless %}
      {% endfor %}

      {% if has_popular_searches %}
        <div class="popular-searches" x-show="searchQuery.length === 0">
          <h3 class="popular-searches__title heading--l">Popular Searches</h3>
          <ul class="popular-searches__list">
            {% for search_term in popular_searches_array %}
              {% unless search_term == blank %}
                <li class="popular-searches__item">
                  <a
                    href="{{ routes.search_url }}?q={{ search_term | url_param_escape }}&type=product&options[prefix]=last"
                    class="popular-searches__link body"
                  >
                    {{ search_term }}
                  </a>
                </li>
              {% endunless %}
            {% endfor %}
          </ul>
        </div>
      {% endif %}
    </div>
  </div>
</aside>

<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('searchDrawer', () => ({
      isOpen: false,
      scrollY: 0,
      searchQuery: '',
      predictiveResults: null,
      searchTimeout: null,

      init() {
        window.toggleSearch = () => {
          this.openSearch();
        };

        window.closeSearch = () => this.closeSearch();
      },

      openSearch() {
        this.scrollY =
          document.body.style.position === 'fixed'
            ? Math.abs(parseInt(document.body.style.top || '0'))
            : window.scrollY;

        if (document.body.style.position !== 'fixed') {
          document.body.style.position = 'fixed';
          document.body.style.top = `-${this.scrollY}px`;
          document.body.style.width = '100%';
        }

        this.isOpen = true;
        document.body.classList.add('search-open');
        document.querySelector('.search-drawer').classList.add('search-drawer--active');

        if (window.closeMenu) {
          window.closeMenu(true);
        }

        // Focus the search input after opening
        setTimeout(() => {
          document.querySelector('.search-form__input')?.focus();
        }, 100);
      },

      closeSearch() {
        if (!this.isOpen) return;

        this.isOpen = false;
        this.searchQuery = '';
        this.predictiveResults = null;
        document.body.classList.remove('search-open');
        document.querySelector('.search-drawer').classList.remove('search-drawer--active');

        document.documentElement.style.scrollBehavior = 'auto';

        document.body.style.position = '';
        document.body.style.top = '';
        document.body.style.width = '';
        window.scrollTo(0, this.scrollY);

        document.documentElement.style.scrollBehavior = '';
      },

      handleSearchInput() {
        clearTimeout(this.searchTimeout);

        if (this.searchQuery.length < 2) {
          this.predictiveResults = null;
          return;
        }

        this.searchTimeout = setTimeout(() => {
          this.fetchPredictiveResults();
        }, 300);
      },

      async fetchPredictiveResults() {
        try {
          const response = await fetch(
            `{{ routes.predictive_search_url }}?q=${encodeURIComponent(
              this.searchQuery
            )}&resources[type]=product&resources[limit]=6&section_id=predictive-search`
          );

          if (!response.ok) return;

          const text = await response.text();
          const parser = new DOMParser();
          const doc = parser.parseFromString(text, 'text/html');

          const products = [];
          const productElements = doc.querySelectorAll('[role="option"]');

          productElements.forEach((element) => {
            const link = element.querySelector('a');
            const img = element.querySelector('img');
            const title = element.querySelector('span');

            if (link && title) {
              products.push({
                id: link.getAttribute('href'),
                url: link.getAttribute('href'),
                title: title.textContent.trim(),
                image: img ? img.getAttribute('src') : null,
              });
            }
          });

          this.predictiveResults = { products };
        } catch (error) {
          console.error('Predictive search error:', error);
        }
      },

      performSearch() {
        if (this.searchQuery.length > 0) {
          window.location.href = `{{ routes.search_url }}?q=${encodeURIComponent(
            this.searchQuery
          )}&type=product&options[prefix]=last`;
        }
      },
    }));
  });
</script>

{% schema %}
{
  "name": "Search drawer",
  "enabled_on": {
    "groups": ["header"]
  },
  "settings": [
    {
      "type": "header",
      "content": "Popular Searches"
    },
    {
      "type": "text",
      "id": "popular_search_1",
      "label": "Popular search 1"
    },
    {
      "type": "text",
      "id": "popular_search_2",
      "label": "Popular search 2"
    },
    {
      "type": "text",
      "id": "popular_search_3",
      "label": "Popular search 3"
    },
    {
      "type": "text",
      "id": "popular_search_4",
      "label": "Popular search 4"
    }
  ]
}
{% endschema %}
