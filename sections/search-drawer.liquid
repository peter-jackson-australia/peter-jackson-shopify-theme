{{ 'section-search-drawer.css' | asset_url | stylesheet_tag }}

<aside
  x-data="searchDrawer"
  x-init="init()"
  @keydown.escape.window="closeSearch()"
  class="search-drawer"
  role="dialog"
  aria-labelledby="search-title"
  @click="closeSearch()"
>
  <div class="search-drawer__container custom-scrollbar" @click.stop>
    <header class="search-drawer__header">
      <h2 id="search-title" class="search-drawer__title heading--xl">Search</h2>
      <button
        class="search-drawer__close"
        type="button"
        aria-label="Close search"
        @click="closeSearch()"
      >
        {% render '_icon-close' %}
      </button>
    </header>

    <div class="search-drawer__content">
      {% render 'search-form' %}

      <div class="search-content-wrapper">
        <div
          class="search-drawer__loading small search-state-transition"
          x-show="isLoading"
          x-transition.opacity.duration.200ms
        >
          <div class="animated-loader">
            <svg fill="#E7E7E7" style="height:4px;display:block" viewBox="0 0 40 4" xmlns="http://www.w3.org/2000/svg">
              <style>
                .react{animation:moving 1s ease-in-out infinite}
                @keyframes moving{0%{width:0%}50%{width:100%;transform:translate(0,0)}100%{width:0;right:0;transform:translate(100%,0)}}
              </style>
              <rect class="react" fill="#E7E7E7" height="4" width="40" />
            </svg>
          </div>
        </div>

        <div
          class="predictive-search__no-results small search-state-transition"
          x-show="$store.search.query.length > 0 && !isLoading && predictiveResults && (!predictiveResults.products || predictiveResults.products.length === 0) && (!predictiveResults.collections || predictiveResults.collections.length === 0)"
          x-transition.opacity.duration.200ms
        >
          <button
            type="button"
            class="predictive-search__search-button button body"
            style="margin-top: 0px;"
            @click="performSearch()"
            x-text="`Search for '${$store.search.query}'`"
          ></button>
        </div>

        <div
          class="search-state-transition"
          x-show="$store.search.query.length > 0 && predictiveResults && !isLoading"
          x-transition.opacity.duration.200ms
        >
          <template x-if="predictiveResults && predictiveResults.products && predictiveResults.products.length > 0">
            <div>
              <h3 class="predictive-search__title heading--l">Products</h3>
              <ul class="predictive-search__results">
                <template x-for="product in predictiveResults.products" :key="product.id">
                  <li class="predictive-search__item">
                    <a :href="product.url" class="predictive-search__link">
                      <div class="predictive-search__image-container">
                        <img
                          :src="product.image"
                          :alt="product.title"
                          class="predictive-search__image"
                          loading="lazy"
                          width="40"
                          height="40"
                        >
                      </div>
                      <span class="predictive-search__text body" x-text="product.title"></span>
                    </a>
                  </li>
                </template>
              </ul>
            </div>
          </template>

          <template x-if="predictiveResults && predictiveResults.collections && predictiveResults.collections.length > 0">
            <div>
              <h3 class="predictive-search__title heading--l">Collections</h3>
              <ul class="predictive-search__results">
                <template x-for="collection in predictiveResults.collections" :key="collection.id">
                  <li class="predictive-search__item">
                    <a :href="collection.url" class="predictive-search__link">
                      <span class="predictive-search__text body" x-text="collection.title"></span>
                    </a>
                  </li>
                </template>
              </ul>
            </div>
          </template>

          <template x-if="$store.search.query.length > 0 && predictiveResults && (predictiveResults.products.length > 0 || predictiveResults.collections.length > 0)">
            <button
              type="button"
              class="predictive-search__search-button button body"
              @click="performSearch()"
              x-text="`Search for '${$store.search.query}'`"
            ></button>
          </template>
        </div>

        {% assign popular_searches = '' %}
        {% assign popular_searches = popular_searches | append: section.settings.popular_search_1 | append: '|' %}
        {% assign popular_searches = popular_searches | append: section.settings.popular_search_2 | append: '|' %}
        {% assign popular_searches = popular_searches | append: section.settings.popular_search_3 | append: '|' %}
        {% assign popular_searches = popular_searches | append: section.settings.popular_search_4 %}
        {% assign popular_searches_array = popular_searches | split: '|' %}

        {% assign has_popular_searches = false %}
        {% for search_term in popular_searches_array %}
          {% unless search_term == blank %}
            {% assign has_popular_searches = true %}
            {% break %}
          {% endunless %}
        {% endfor %}

        {% if has_popular_searches %}
          <div
            class="popular-searches search-state-transition"
            x-show="$store.search.query.length === 0 && !isLoading"
            x-transition.opacity.duration.200ms
          >
            <h3 class="popular-searches__title heading--l">Popular Searches</h3>
            <ul class="popular-searches__list">
              {% for search_term in popular_searches_array %}
                {% unless search_term == blank %}
                  <li class="popular-searches__item">
                    <a
                      href="{{ routes.search_url }}?q={{ search_term | url_param_escape }}&type=product&options[prefix]=last"
                      class="popular-searches__link body"
                    >
                      {{ search_term }}
                    </a>
                  </li>
                {% endunless %}
              {% endfor %}
            </ul>
          </div>
        {% endif %}
      </div>

      <div
        class="sub-drawer-trigger body--uppercase search-state-transition"
        x-show="$store.search.query.length === 0 && !isLoading"
        x-transition.opacity.duration.200ms
        @click.stop="toggleSubDrawer()"
      >
        Knowledge Base
      </div>

      {% assign new_arrivals = collections['new-arrivals'] %}
      {% if new_arrivals and new_arrivals.products.size > 0 %}
        <div
          class="search-drawer__new-arrivals search-state-transition"
          x-show="$store.search.query.length === 0 && !isLoading"
          x-transition.opacity.duration.200ms
        >
          <h3 class="predictive-search__title heading--l">New Arrivals</h3>
          <div class="search-drawer__new-arrivals-grid">
            {% for product in new_arrivals.products limit: 6 %}
              <a href="{{ product.url }}" class="search-drawer__product-card">
                <div class="search-drawer__product-image-wrapper">
                  {% if product.featured_image != blank %}
                    {% assign image_aspect_ratio = product.featured_image.aspect_ratio | default: 1 %}
                    {% assign image_height = 300 | divided_by: image_aspect_ratio | round %}
                    {{
                      product.featured_image
                      | image_url: width: product.featured_image.width
                      | image_tag:
                        class: 'search-drawer__product-image',
                        sizes: '(max-width: 768px) 150px, 300px',
                        loading: 'lazy',
                        decoding: 'async',
                        alt: product.featured_image.alt
                      | escape
                      | default: product.title, width: 300, height: image_height
                    }}
                  {% else %}
                    {{ 'product-1' | placeholder_svg_tag: 'search-drawer__product-image placeholder' }}
                  {% endif %}
                </div>

                <h3 class="body--bold search-drawer__product-title">{{ product.title }}</h3>

                <p class="small search-drawer__product-price">
                  <span class="search-drawer__product-price--current">{{ product.price | money_with_currency }}</span>
                  {% if product.compare_at_price > product.price %}
                    <span class="search-drawer__product-price--compare">
                      {{- product.compare_at_price | money_with_currency -}}
                    </span>
                  {% endif %}
                </p>
              </a>
            {% endfor %}
          </div>
        </div>
      {% endif %}
    </div>
  </div>

  <div class="sub-drawer custom-scrollbar" :class="{ 'sub-drawer--active': subDrawerOpen }" @click.stop>
    <header class="sub-drawer__header">
      <button @click="toggleSubDrawer()" class="sub-drawer__back" aria-label="Back to search">
        <span>
          {%- render '_icon-arrow-see-less' -%}
        </span>
        <span class="body--uppercase">Back</span>
      </button>
      <h2 class="sub-drawer__title heading--xl">Knowledge Base</h2>
    </header>
    <div class="sub-drawer__content">
      <div class="faq-list">
        {% if section.settings.faq_1_title != blank %}
          <div class="faq-item">
            <h3 class="faq-item__title body--bold">{{ section.settings.faq_1_title }}</h3>
            <p
              class="faq-item__description body"
              x-text="truncateText('{{ section.settings.faq_1_description | escape }}', 200)"
            ></p>
            {% if section.settings.faq_1_link != blank %}
              <a href="{{ section.settings.faq_1_link }}" class="faq-item__link body">Learn more</a>
            {% endif %}
          </div>
        {% endif %}

        {% if section.settings.faq_2_title != blank %}
          <div class="faq-item">
            <h3 class="faq-item__title body--bold">{{ section.settings.faq_2_title }}</h3>
            <p
              class="faq-item__description body"
              x-text="truncateText('{{ section.settings.faq_2_description | escape }}', 200)"
            ></p>
            {% if section.settings.faq_2_link != blank %}
              <a href="{{ section.settings.faq_2_link }}" class="faq-item__link body">Learn more</a>
            {% endif %}
          </div>
        {% endif %}

        {% if section.settings.faq_3_title != blank %}
          <div class="faq-item">
            <h3 class="faq-item__title body--bold">{{ section.settings.faq_3_title }}</h3>
            <p
              class="faq-item__description body"
              x-text="truncateText('{{ section.settings.faq_3_description | escape }}', 200)"
            ></p>
            {% if section.settings.faq_3_link != blank %}
              <a href="{{ section.settings.faq_3_link }}" class="faq-item__link body">Learn more</a>
            {% endif %}
          </div>
        {% endif %}

        {% if section.settings.faq_4_title != blank %}
          <div class="faq-item">
            <h3 class="faq-item__title body--bold">{{ section.settings.faq_4_title }}</h3>
            <p
              class="faq-item__description body"
              x-text="truncateText('{{ section.settings.faq_4_description | escape }}', 200)"
            ></p>
            {% if section.settings.faq_4_link != blank %}
              <a href="{{ section.settings.faq_4_link }}" class="faq-item__link body">Learn more</a>
            {% endif %}
          </div>
        {% endif %}
      </div>
    </div>
  </div>
</aside>

<script>
  document.addEventListener('alpine:init', () => {
    Alpine.store('search', {
      query: '',
    });

    Alpine.data('searchDrawer', () => ({
      isOpen: false,
      scrollY: 0,
      predictiveResults: null,
      searchTimeout: null,
      isLoading: false,
      currentController: null,
      subDrawerOpen: false,

      init() {
        window.toggleSearch = () => {
          this.openSearch();
        };

        window.closeSearch = () => this.closeSearch();

        this.$watch('$store.search.query', (value) => {
          this.handleSearchInput(value);
        });
      },

      openSearch() {
        this.scrollY =
          document.body.style.position === 'fixed'
            ? Math.abs(parseInt(document.body.style.top || '0'))
            : window.scrollY;

        if (document.body.style.position !== 'fixed') {
          document.body.style.position = 'fixed';
          document.body.style.top = `-${this.scrollY}px`;
          document.body.style.width = '100%';
        }

        this.isOpen = true;
        document.body.classList.add('search-open');
        document.querySelector('.search-drawer').classList.add('search-drawer--active');

        if (window.closeMenu) {
          window.closeMenu(true);
        }
      },

      closeSearch() {
        if (!this.isOpen) return;

        this.isOpen = false;
        this.subDrawerOpen = false;
        Alpine.store('search').query = '';
        this.predictiveResults = null;
        this.isLoading = false;
        document.body.classList.remove('search-open');
        document.querySelector('.search-drawer').classList.remove('search-drawer--active');

        document.documentElement.style.scrollBehavior = 'auto';

        document.body.style.position = '';
        document.body.style.top = '';
        document.body.style.width = '';
        window.scrollTo(0, this.scrollY);

        document.documentElement.style.scrollBehavior = '';
      },

      toggleSubDrawer() {
        this.subDrawerOpen = !this.subDrawerOpen;
      },

      truncateText(text, maxLength) {
        if (text.length <= maxLength) return text;
        return text.substring(0, maxLength) + '...';
      },

      handleSearchInput(query) {
        clearTimeout(this.searchTimeout);

        if (this.currentController) {
          this.currentController.abort();
          this.currentController = null;
        }

        if (query.length > 0 && this.subDrawerOpen) {
          this.subDrawerOpen = false;
        }

        if (query.length < 1) {
          this.predictiveResults = null;
          this.isLoading = false;
          return;
        }

        this.isLoading = true;
        this.searchTimeout = setTimeout(() => {
          this.fetchPredictiveResults(query);
        }, 300);
      },

      async fetchPredictiveResults(query) {
        try {
          if (this.currentController) {
            this.currentController.abort();
          }

          this.currentController = new AbortController();

          const response = await fetch(
            `/search/suggest.json?q=${encodeURIComponent(
              query
            )}&resources[type]=product,collection&resources[limit]=5&resources[limit_scope]=each`,
            { signal: this.currentController.signal }
          );

          if (!response.ok) {
            this.isLoading = false;
            return;
          }

          const data = await response.json();

          const products = [];
          const collections = [];

          if (data.resources && data.resources.results && data.resources.results.products) {
            data.resources.results.products.forEach((product) => {
              let imageUrl = null;
              if (product.image) {
                imageUrl = product.image.replace(/width=\d+/, 'width=150');
                if (!imageUrl.includes('width=')) {
                  imageUrl = product.image + (product.image.includes('?') ? '&' : '?') + 'width=150';
                }
              }

              products.push({
                id: product.id,
                url: product.url,
                title: product.title,
                image: imageUrl,
              });
            });
          }

          if (data.resources && data.resources.results && data.resources.results.collections) {
            data.resources.results.collections.forEach((collection) => {
              let imageUrl = null;
              if (collection.image) {
                imageUrl = collection.image.replace(/width=\d+/, 'width=150');
                if (!imageUrl.includes('width=')) {
                  imageUrl = collection.image + (collection.image.includes('?') ? '&' : '?') + 'width=150';
                }
              }

              collections.push({
                id: collection.id,
                url: collection.url,
                title: collection.title,
                image: imageUrl,
              });
            });
          }

          this.predictiveResults = {
            products,
            collections: collections.slice(0, 3),
          };
          this.isLoading = false;
          this.currentController = null;
        } catch (error) {
          if (error.name === 'AbortError') {
            return;
          }
          console.error('Predictive search error:', error);
          this.isLoading = false;
          this.currentController = null;
        }
      },

      performSearch() {
        const query = Alpine.store('search').query;
        if (query.length > 0) {
          window.location.href = `{{ routes.search_url }}?q=${encodeURIComponent(
            query
          )}&type=product&options[prefix]=last`;
        }
      },
    }));

    window.addEventListener('unhandledrejection', (event) => {
      if (event.reason && event.reason.isFromCancelledTransition) {
        event.preventDefault();
      }
    });
  });
</script>

{% schema %}
{
  "name": "Search drawer",
  "enabled_on": {
    "groups": ["header"]
  },
  "settings": [
    {
      "type": "header",
      "content": "Popular Searches"
    },
    {
      "type": "text",
      "id": "popular_search_1",
      "label": "Popular search 1"
    },
    {
      "type": "text",
      "id": "popular_search_2",
      "label": "Popular search 2"
    },
    {
      "type": "text",
      "id": "popular_search_3",
      "label": "Popular search 3"
    },
    {
      "type": "text",
      "id": "popular_search_4",
      "label": "Popular search 4"
    },
    {
      "type": "header",
      "content": "FAQ Settings"
    },
    {
      "type": "text",
      "id": "faq_1_title",
      "label": "FAQ 1 - Title"
    },
    {
      "type": "textarea",
      "id": "faq_1_description",
      "label": "FAQ 1 - Description"
    },
    {
      "type": "url",
      "id": "faq_1_link",
      "label": "FAQ 1 - Link"
    },
    {
      "type": "text",
      "id": "faq_2_title",
      "label": "FAQ 2 - Title"
    },
    {
      "type": "textarea",
      "id": "faq_2_description",
      "label": "FAQ 2 - Description"
    },
    {
      "type": "url",
      "id": "faq_2_link",
      "label": "FAQ 2 - Link"
    },
    {
      "type": "text",
      "id": "faq_3_title",
      "label": "FAQ 3 - Title"
    },
    {
      "type": "textarea",
      "id": "faq_3_description",
      "label": "FAQ 3 - Description"
    },
    {
      "type": "url",
      "id": "faq_3_link",
      "label": "FAQ 3 - Link"
    },
    {
      "type": "text",
      "id": "faq_4_title",
      "label": "FAQ 4 - Title"
    },
    {
      "type": "textarea",
      "id": "faq_4_description",
      "label": "FAQ 4 - Description"
    },
    {
      "type": "url",
      "id": "faq_4_link",
      "label": "FAQ 4 - Link"
    }
  ]
}
{% endschema %}
