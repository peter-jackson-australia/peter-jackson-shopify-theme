<style>
  .location-hero {
    display: flex;
    align-items: center;
  }

  .location-hero__image {
    flex: 1;
    max-width: 50%;
  }

  .location-hero__image img {
    width: 100%;
    height: auto;
    object-fit: cover;
  }

  .location-hero__content {
    flex: 1;
    max-width: 50%;
    padding: var(--space-3xl);
  }

  .location-hero__header {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
    margin-bottom: var(--space-s);
  }

  .location-hero__status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: var(--green-400);
    flex-shrink: 0;
  }

  .location-hero__status-dot--closed {
    background-color: #ff0000;
  }

  .location-hero__title {
    margin: 0;
  }

  .location-hero__address {
    margin-bottom: var(--space-xs);
  }

  .location-hero__address a {
    color: var(--neutral-950);
  }

  .location-hero__phone {
    margin-bottom: var(--space-s);
  }

  .location-hero__phone a {
    color: var(--neutral-950);
  }

  .location-hero__hours {
    margin-bottom: var(--space-s);
  }

  .location-hero__hours-title {
    margin-bottom: var(--space-3xs);
  }

  .location-hero__hours-display {
    margin: 0;
    white-space: pre-line;
  }

  .location-hero__description {
    margin-bottom: var(--space-s);
  }

  .location-hero__button {
    width: 100%;
    height: var(--space-xl);
    background-color: var(--neutral-950);
    color: var(--white);
    border: none;
    padding: var(--space-xs) var(--space-s);
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: var(--space-s);
    text-decoration: none;
  }

  .location-hero__time-info {
    margin-top: var(--space-s);
  }

  .location-hero__current-time {
    margin-bottom: var(--space-3xs);
  }

  .location-hero__opening-status {
    margin: 0;
  }

  @media screen and (max-width: 1000px) {
    .location-hero {
      flex-direction: column;
      gap: var(--space-m);
      padding: var(--space-m);
    }

    .location-hero__image {
      display: none;
    }

    .location-hero__content {
      max-width: 100%;
    }
  }
</style>

{% assign location = page.metafields.custom.location_reference.value %}

{% if location %}
  <div class="location-hero" data-state="{{ location.location_state }}">
    <div class="location-hero__image">
      {% if location.location_image %}
        <img
          src="{{ location.location_image | image_url: width: 600, height: 600 }}"
          alt="{{ location.location_name }}"
          width="600"
          height="600"
        >
      {% else %}
        <img
          src="{{ section.settings.default_image | image_url: width: 600, height: 600 }}"
          alt="{{ location.location_name }}"
          width="600"
          height="600"
        >
      {% endif %}
    </div>

    <div class="location-hero__content">
      <div class="location-hero__header">
        <div class="location-hero__status-dot" id="location-status-dot"></div>
        <h1 class="location-hero__title heading--2xl">{{ location.location_name }}</h1>
      </div>

      <div class="location-hero__address body">
        <a href="{{ location.google_maps_link }}" target="_blank">{{ location.street_address }}</a>
      </div>

      <div class="location-hero__phone body">
        <a href="tel:{{ location.phone_number }}">{{ location.phone_number }}</a>
      </div>

      <div class="location-hero__hours">
        <div class="location-hero__hours-title body--bold">Opening Hours:</div>
        <pre class="location-hero__hours-display body" id="opening-hours-display">{{ location.opening_hours }}</pre>
      </div>

      {% if location.location_description %}
        <div class="location-hero__description body">{{ location.location_description }}</div>
      {% endif %}

      <a href="/pages/contact" class="location-hero__button body">Contact Us</a>

      <div class="location-hero__time-info" id="current-time-info">
        <div class="location-hero__current-time small" id="current-local-time">Loading current time...</div>
        <div class="location-hero__opening-status small" id="opening-status">Checking opening status...</div>
      </div>
    </div>
  </div>

  <script>
    class ShopifyTimezoneHandler {
      constructor() {
        this.timezones = {
          NSW: 'Australia/Sydney',
          VIC: 'Australia/Melbourne',
          QLD: 'Australia/Brisbane',
          SA: 'Australia/Adelaide',
          WA: 'Australia/Perth',
          TAS: 'Australia/Hobart',
          NT: 'Australia/Darwin',
          ACT: 'Australia/Sydney',
        };
        this.dstStates = ['NSW', 'VIC', 'SA', 'TAS', 'ACT'];
        this.init();
      }

      init() {
        this.updateLocationTime();
        setInterval(() => this.updateLocationTime(), 60000);
      }

      getStateTime(state) {
        if (!this.timezones[state]) {
          console.error(`Unknown state: ${state}`);
          return null;
        }

        const timezone = this.timezones[state];
        const now = new Date();

        const formatter = new Intl.DateTimeFormat('en-AU', {
          timeZone: timezone,
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit',
          hour12: false,
          weekday: 'long',
        });

        const parts = formatter.formatToParts(now);
        const timeData = {};
        parts.forEach((part) => (timeData[part.type] = part.value));

        const offsetFormatter = new Intl.DateTimeFormat('en', {
          timeZone: timezone,
          timeZoneName: 'longOffset',
        });
        const currentOffset = offsetFormatter.formatToParts(now).find((part) => part.type === 'timeZoneName').value;

        const isDSTActive = this.isDSTActive(timezone, now);

        return {
          state: state,
          time: `${timeData.hour}:${timeData.minute}`,
          day: timeData.weekday,
          date: `${timeData.day}/${timeData.month}/${timeData.year}`,
          offset: currentOffset,
          isDST: isDSTActive,
          observesDST: this.dstStates.includes(state),
        };
      }

      isDSTActive(timezone, date = new Date()) {
        const january = new Date(date.getFullYear(), 0, 15);
        const july = new Date(date.getFullYear(), 6, 15);

        const janOffset = this.getOffset(timezone, january);
        const julOffset = this.getOffset(timezone, july);
        const currentOffset = this.getOffset(timezone, date);

        return janOffset !== julOffset && currentOffset === janOffset;
      }

      getOffset(timezone, date) {
        return new Intl.DateTimeFormat('en', {
          timeZone: timezone,
          timeZoneName: 'longOffset',
        })
          .formatToParts(date)
          .find((part) => part.type === 'timeZoneName').value;
      }

      checkOpeningStatus(timeData, openingHours) {
        if (!timeData || !openingHours) return null;

        const hoursLines = openingHours.split('\n');
        const currentDay = timeData.day;
        const currentTime = timeData.time;

        for (let line of hoursLines) {
          if (line.includes(currentDay)) {
            const parts = line.split(': ');
            if (parts.length < 2) continue;

            const todayHours = parts[1].trim();

            if (todayHours === 'Closed') {
              return {
                isOpen: false,
                status: 'Closed today',
                hours: todayHours,
              };
            }

            const timeRange = todayHours.split(' - ');
            if (timeRange.length !== 2) continue;

            const [openTime, closeTime] = timeRange;

            const currentMinutes = this.timeToMinutes(currentTime);
            const openMinutes = this.timeToMinutes(openTime);
            const closeMinutes = this.timeToMinutes(closeTime);

            const isOpen = currentMinutes >= openMinutes && currentMinutes <= closeMinutes;

            return {
              isOpen: isOpen,
              status: isOpen ? `Open until ${closeTime}` : `Closed (opens at ${openTime})`,
              hours: todayHours,
              openTime: openTime,
              closeTime: closeTime,
            };
          }
        }

        return {
          isOpen: false,
          status: 'Hours not available',
          hours: 'Unknown',
        };
      }

      timeToMinutes(timeStr) {
        const [hours, minutes] = timeStr.split(':').map(Number);
        return hours * 60 + minutes;
      }

      updateLocationTime() {
        const locationHero = document.querySelector('.location-hero');
        if (!locationHero) return;

        const state = locationHero.getAttribute('data-state');
        if (!state) {
          console.error('No state found in data-state attribute');
          return;
        }

        const timeData = this.getStateTime(state);
        if (!timeData) return;

        const openingHoursElement = document.getElementById('opening-hours-display');
        const openingHours = openingHoursElement ? openingHoursElement.textContent : '';

        const openingStatus = this.checkOpeningStatus(timeData, openingHours);

        const statusDot = document.getElementById('location-status-dot');
        if (statusDot && openingStatus) {
          if (openingStatus.isOpen) {
            statusDot.classList.remove('location-hero__status-dot--closed');
          } else {
            statusDot.classList.add('location-hero__status-dot--closed');
          }
        }

        const currentTimeElement = document.getElementById('current-local-time');
        if (currentTimeElement) {
          const dstIndicator = timeData.observesDST ? (timeData.isDST ? ' (DST)' : ' (Standard)') : '';
          currentTimeElement.innerHTML = `Current ${state} Time: ${timeData.time} on ${timeData.day}${dstIndicator}`;
        }

        const statusElement = document.getElementById('opening-status');
        if (statusElement && openingStatus) {
          statusElement.innerHTML = openingStatus.status;
        }

        console.log('Updated timezone data:', {
          state: timeData.state,
          time: timeData.time,
          isDST: timeData.isDST,
          isOpen: openingStatus ? openingStatus.isOpen : 'unknown',
        });
      }
    }

    document.addEventListener('DOMContentLoaded', function () {
      new ShopifyTimezoneHandler();
    });
  </script>
{% endif %}

{% schema %}
{
  "name": "Location Hero",
  "tag": "section",
  "enabled_on": {
    "templates": ["page"]
  },
  "settings": [
    {
      "type": "image_picker",
      "id": "default_image",
      "label": "Default Location Image",
      "info": "Used when no image is set in the location metaobject"
    }
  ]
}
{% endschema %}
