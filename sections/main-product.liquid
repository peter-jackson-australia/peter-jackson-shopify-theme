{% comment %}
  Main product gallery and information
{% endcomment %}

{{ 'section-main-product.css' | asset_url | stylesheet_tag }}

<style>
  @media screen and (min-width: 1100x) {
    .product-details__container {
      max-height: calc({{product.images[0].height}} * 50vw / {{product.images[0].width}});
    }
  }
</style>

{% assign current_variant = null %}

{% for variant in product.variants %}
  {% if variant.available and variant.inventory_quantity > 5 %}
    {% assign current_variant = variant %}
    {% break %}
  {% endif %}
{% endfor %}

{% if current_variant == null %}
  {% assign current_variant = product.selected_or_first_available_variant %}
{% endif %}

<script>
  var current_variant = {{ current_variant | json }};
  var variants = {{ product.variants | json }};
  var default_image = {{ product.featured_image.id | default: 'null' }};
  var product_type = {{ product.type | json }};
  var variant_inventory_quantities = [{% for variant in product.variants %}{{ variant.inventory_quantity }}{% unless forloop.last %},{% endunless %}{% endfor %}];
  var product_title = {{ product.title | json }};
  var product_options = {{ product.options | json }};
  var show_low_stock_warning = {{ section.settings.show_low_stock_warning | json }};
</script>

<div>
  <div id="product">
    <div class="product-top-breadcrumb-container">
      {% render 'breadcrumb' %}
    </div>
    <div class="product-images-container">
      <div class="splide product-images-splide">
        <div class="splide__arrows">
          <button class="splide__arrow splide__arrow--prev">
            <svg width="7" height="12" viewBox="0 0 7 12" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M6 1L1 6L6 11" stroke="#0F0F0F" stroke-linecap="square"/>
            </svg>
          </button>
          <button class="splide__arrow splide__arrow--next">
            <svg width="7" height="12" viewBox="0 0 7 12" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M1 1L6 6L1 11" stroke="#0F0F0F" stroke-linecap="square"/>
            </svg>
          </button>
        </div>

        <div class="splide__track">
          <ul class="splide__list">
            {% for image in product.images %}
              <li class="splide__slide" data-imageid="{{ image.id }}">
                {% if forloop.first %}
                  {{
                    image
                    | image_url: width: image.width
                    | image_tag:
                      sizes: '(max-width: 768px) 400px, 1200px',
                      alt: image.alt,
                      loading: 'eager',
                      decoding: 'async',
                      fetchpriority: 'high'
                  }}
                {% else %}
                  {{
                    image
                    | image_url: width: image.width
                    | image_tag:
                      sizes: '(max-width: 768px) 400px, 1200px',
                      alt: image.alt,
                      loading: 'lazy',
                      decoding: 'async'
                  }}
                {% endif %}
              </li>
            {% endfor %}
          </ul>
        </div>

        <div class="product-images-progress">
          <div class="product-images-progress__bar"></div>
        </div>
      </div>
    </div>

    <section
      class="product-details__container custom-scrollbar"
    >
      <div id="product-details">
        {% if section.settings.show_afterpay %}
          <p class="product-details__sku small">
            Buy In 4 Interest Free Payments of {{ current_variant.price | divided_by: 4 | money_with_currency }}
            {{ 'afterpay' | payment_type_svg_tag }}
          </p>
        {% elsif current_variant.sku %}
          <p class="product-details__sku small">
            Product Code:
            <span class="js--variant-sku">{{ current_variant.sku }}</span>
          </p>
        {% endif %}
        <div class="product-details__header">
          <h1 class="product-details__title heading--xl" data-title="{{ product.title }}">{{ product.title }}</h1>
          <div class="product-details__price">
            {% if current_variant.compare_at_price > current_variant.price %}
              <span class="product-details__compare-price body js--variant-compareatprice">
                {{ current_variant.compare_at_price | money_with_currency }}
              </span>
            {% endif %}
            <span class="product-details__price-actual body js--variant-price">
              {{ current_variant.price | money_with_currency }}
            </span>
          </div>
        </div>

        <div class="product-details__info-container">
          {% if localization.market.handle == 'au' %}
            <p class="small" style="color: var(--neutral-600);">
              {{ product.metafields.custom.discount_bundle_name | metafield_tag }}
            </p>
          {% endif %}
          <button
            type="button"
            class="size-guide-button small"
          >
            What's my size?
          </button>
        </div>

        {% if product.metafields.custom.product_colour_variants %}
          {% render 'related-product-slider' %}
        {% endif %}

        <form action="{{ routes.cart_add_url }}" method="post" onsubmit="return false;" id="js--variant-form">
          {%- for block in section.blocks -%}
            {% case block.type %}
              {%- when '@app' -%}
                {% render block %}

              {%- when 'options' %}
                {% unless product.has_only_default_variant %}
                  {% for option_group in product.options_with_values %}
                    {% assign option_field = option_group.position | prepend: 'option' %}
                    <fieldset class="variant-options js--variant-options">
                      <legend class="body--bold">{{ option_group.name }}:</legend>
                      <div class="variant-options__list">
                        {% for value in option_group.values %}
                          {% capture option_id %}{{ option_group.name }}_{{ value }}{% endcapture %}
                          <div class="variant-option">
                            <input
                              type="radio"
                              id="{{ option_id | handleize }}"
                              class="js--variant-option"
                              name="{{ option_group.position | prepend: 'option'}}"
                              value="{{ value }}"
                              {% if current_variant[option_field] == value %}
                                checked
                              {% endif %}
                            >
                            <label for="{{ option_id | handleize }}" class="body">
                              {% if option_group.name == 'Size' and value contains '.0' %}
                                {{- value | remove: '.0' -}}
                              {% else %}
                                {{- value -}}
                              {% endif %}
                            </label>
                          </div>
                        {% endfor %}
                      </div>
                    </fieldset>
                  {% endfor %}
                  {% if product.metafields.custom.show_pants_size_for_suits %}
                    <p class="small" style="margin-bottom: var(--space-m); color: var(--neutral-600);">
                      Suit Includes Trousers Size:
                      <span class="js--pants-size">{{ current_variant.option1 | minus: 12 }}</span>
                    </p>
                  {% endif %}
                {% endunless %}

              {%- when 'button' -%}
                <input
                  type="hidden"
                  id="js--variant-id"
                  name="id"
                  value="{{ current_variant.id }}"
                >
                <input
                  type="hidden"
                  id="js--variant-inventory-quantity"
                  value="{{ current_variant.inventory_quantity }}"
                >

                {% if current_variant.available and product.gift_card? %}
                  <button
                    type="submit"
                    id="js--addtocart"
                    class="body"
                    style="height: var(--space-xl); {% if section.settings.round_cta %} border-radius: 200px; {% endif %}"
                  >
                    Add To Cart
                  </button>
                {% elsif current_variant.available and current_variant.inventory_quantity > 5 %}
                  <button
                    type="submit"
                    id="js--addtocart"
                    class="body"
                    style="height: var(--space-xl); {% if section.settings.round_cta %} border-radius: 200px; {% endif %}"
                  >
                    {% if section.settings.show_low_stock_warning
                      and current_variant.available
                      and current_variant.inventory_quantity >= 6
                      and current_variant.inventory_quantity <= 10
                      and product.gift_card? == false
                    %}
                      Low In Stock - Add To Cart
                    {% else %}
                      Add To Cart
                    {% endif %}
                  </button>
                {% else %}
                  <button
                    type="submit"
                    id="js--addtocart"
                    class="body"
                    style="height: var(--space-xl); display: none; {% if section.settings.round_cta %} border-radius: 200px; {% endif %}"
                  >
                    Add To Cart
                  </button>
                {% endif %}
                <button
                  type="button"
                  id="js--notify-me"
                  class="body"
                  style="height: var(--space-xl); width: 100%; background-color: var(--neutral-950); color: var(--white); border: none; padding: var(--space-s) var(--space-m); cursor: pointer; margin-bottom: var(--space-s); {% if current_variant.available and product.gift_card? %}display: none;{% elsif current_variant.available and current_variant.inventory_quantity > 5 %}display: none;{% else %}display: block;{% endif %} {% if section.settings.round_cta %} border-radius: 200px; {% endif %}"
                >
                  Out of Stock - Notify Me
                </button>

                <div
                  class="klaviyo-form-WMidEs"
                  style="{% if current_variant.available and product.gift_card? %}display: none;{% elsif current_variant.available and current_variant.inventory_quantity > 5 %}display: none;{% else %}display: none;{% endif %}"
                ></div>
            {%- endcase -%}
          {%- endfor -%}
        </form>

        {% assign has_description = false %}
        {% assign has_specs = false %}
        {% assign has_shipping = false %}

        {% if product.description != blank %}
          {% assign has_description = true %}
        {% endif %}

        {% if product.metafields.custom.care_guide != blank
          or product.metafields.custom.garment_fit != blank
          or product.metafields.custom.product_specifications != blank
        %}
          {% assign has_specs = true %}
        {% endif %}

        {% if section.settings.shipping_content != blank %}
          {% assign has_shipping = true %}
        {% endif %}

        {% if has_description or has_specs or has_shipping %}
          <div class="product-tabs">
            <div class="product-tabs__list">
              {% if has_description %}
                <button class="product-tabs__tab body--uppercase" data-tab="description">Product Info</button>
              {% endif %}
              {% if has_specs %}
                <button class="product-tabs__tab body--uppercase" data-tab="specs">Specifications And Care</button>
              {% endif %}
              {% if has_shipping %}
                <button class="product-tabs__tab body--uppercase" data-tab="shipping">Shipping</button>
              {% endif %}
            </div>

            {% if has_description %}
              <div class="product-tabs__content" data-content="description">
                <div class="product-tabs__description body">
                  {{ product.description }}
                  {% if product.metafields.custom.stylist_notes %}
                    <div>
                      <strong class="product-tabs__description-stylist-notes-heading body--bold">Stylist Notes</strong>
                      {{ product.metafields.custom.stylist_notes | metafield_tag }}
                    </div>
                  {% endif %}
                  {% if section.settings.show_usps %}
                    <hr
                      class="product-tabs__description-usp-hr"
                    >
                    <ul>
                      <li>
                        {% if product.price > 9900 %}
                          <strong class="body--bold product-tabs__description-usp"
                            >Complimentary standard shipping on this item.</strong
                          >
                        {% else %}
                          <strong class="body--bold product-tabs__description-usp"
                            >Complimentary standard shipping over $99.</strong
                          >
                        {% endif %}
                      </li>
                      <li>
                        <strong class="body--bold product-tabs__description-usp">30 Day Returns Policy</strong>
                      </li>
                      {% if product.metafields.custom.fabric_description %}
                        <li>
                          <strong class="body--bold product-tabs__description-usp">
                            {{- product.metafields.custom.fabric_description -}}
                          </strong>
                        </li>
                      {% endif %}
                    </ul>
                  {% endif %}
                </div>
              </div>
            {% endif %}

            {% if has_specs %}
              <div class="product-tabs__content" data-content="specs">
                {% if product.metafields.custom.garment_fit != blank %}
                  <div class="product-tabs__metafield">
                    <h4 class="body--bold">Sizing Information</h4>
                    <div class="body">{{ product.metafields.custom.garment_fit | metafield_tag }}</div>
                  </div>
                {% endif %}

                {% if product.metafields.custom.product_specifications != blank %}
                  <div class="product-tabs__metafield">
                    <h4 class="body--bold">Specifications</h4>
                    <div class="body">{{ product.metafields.custom.product_specifications | metafield_tag }}</div>
                  </div>
                {% endif %}

                {% if product.metafields.custom.care_guide != blank %}
                  <div class="product-tabs__metafield">
                    <h4 class="body--bold">Fabric and Care</h4>
                    <div class="body">{{ product.metafields.custom.care_guide | metafield_tag }}</div>
                  </div>
                {% endif %}
              </div>
            {% endif %}

            {% if has_shipping %}
              <div class="product-tabs__content" data-content="shipping">
                <div class="body product-tabs__content-shipping">
                  {{ section.settings.shipping_content }}
                </div>
              </div>
            {% endif %}
          </div>
        {% endif %}
      </div>
      <div class="product-details__fade-overlay"></div>
    </section>
  </div>
</div>

<div class="sticky-cart-bar">
  <div class="sticky-cart-bar__container">
    <div class="sticky-cart-bar__thumbnail">
      {% if product.featured_image %}
        {{ product.featured_image | image_url: width: 120 | image_tag: alt: product.title }}
      {% endif %}
    </div>

    <div class="sticky-cart-bar__product-title heading--l">
      {{ product.title }}
    </div>

    <div class="sticky-cart-bar__price-container">
      {% if current_variant.compare_at_price > current_variant.price %}
        <span class="sticky-cart-bar__compare-price body js--sticky-compare-price">
          {{ current_variant.compare_at_price | money_with_currency }}
        </span>
      {% endif %}
      <span class="sticky-cart-bar__price body js--sticky-price">
        {{ current_variant.price | money_with_currency }}
      </span>
    </div>

    <div class="sticky-cart-bar__mobile-info">
      <div class="sticky-cart-bar__mobile-title body">
        {{ product.title }}
      </div>
      <div class="sticky-cart-bar__mobile-price-container">
        {% if current_variant.compare_at_price > current_variant.price %}
          <span class="sticky-cart-bar__mobile-compare-price body js--sticky-mobile-compare-price">
            {{ current_variant.compare_at_price | money_with_currency }}
          </span>
        {% endif %}
        <span class="sticky-cart-bar__mobile-price body js--sticky-mobile-price">
          {{ current_variant.price | money_with_currency }}
        </span>
      </div>
    </div>

    <div class="sticky-cart-bar__product-info body">
      <span class="js--sticky-product-info"></span>
    </div>
  </div>
</div>

<div class="modal-overlay">
  <div class="modal-content custom-scrollbar">
    {% render 'size-guide' %}
  </div>
</div>

<script>
  window.Shopify = window.Shopify || {};
  Shopify.money_format = {{ shop.money_with_currency_format | json }};
  document.addEventListener('DOMContentLoaded', function () {
    
    if (typeof Alpine === 'undefined') {
      console.warn('Alpine.js is required for the size guide modal');
    }

    const sizeGuideButton = document.querySelector('.size-guide-button');
    const modalOverlay = document.querySelector('.modal-overlay');
    const modalClose = document.querySelector('.modal-close');

    if (sizeGuideButton && modalOverlay) {
      sizeGuideButton.addEventListener('click', function () {
        modalOverlay.classList.add('is-active');
        document.body.classList.add('modal-open');
      });

      modalOverlay.addEventListener('click', function (e) {
        if (e.target === modalOverlay) {
          modalOverlay.classList.remove('is-active');
          document.body.classList.remove('modal-open');
        }
      });

      if (modalClose) {
        modalClose.addEventListener('click', function () {
          modalOverlay.classList.remove('is-active');
          document.body.classList.remove('modal-open');
        });
      }
    }

    if (typeof Splide !== 'undefined') {
      initializeProductSlider();
    } else {
      window.addEventListener('load', function () {
        initializeProductSlider();
      });
    }

    function initializeProductSlider() {
      let splideInstance = null;
      const container = document.querySelector('.product-images-container');
      const progressBar = document.querySelector('.product-images-progress__bar');

      function initSlider() {
        if (splideInstance) {
          splideInstance.destroy();
        }

        const isMobile = window.innerWidth < 1100;

        const options = {
          direction: 'ttb',
          height: {{product.images[0].height}} * (window.innerWidth * 0.5 / {{product.images[0].width}}),
          wheel: true,
          waitForTransition: true,
          arrows: false,
          pagination: false,
          speed: 300,
          drag: true,
          breakpoints: {
            1100: {
              type: 'loop',
              direction: 'ltr',
              height: {{product.images[0].height}} * (window.innerWidth * 1 / {{product.images[0].width}}),
              arrows: true,
              perPage: 1,
              pagination: false,
              rewind: false,
              wheel: false,
              drag: true,
              speed: 300,
              waitForTransition: true,
            },
          },
        };

        splideInstance = new Splide('.product-images-splide', options);

        splideInstance.on('mounted move', function () {
          const end = splideInstance.Components.Controller.getEnd() + 1;
          const rate = Math.min((splideInstance.index + 1) / end, 1);

          if (isMobile) {
            progressBar.style.width = String(100 * rate) + '%';
          } else {
            progressBar.style.height = String(100 * rate) + '%';
          }
        });

        splideInstance.mount();
        if (splideInstance.length <= 1) {
          document.querySelector('.product-images-progress').style.display = 'none';
          if (isMobile) {
            document.querySelector('.splide__arrows').style.display = 'none';
          }
        } else {
          document.querySelector('.product-images-progress').style.display = '';
          if (isMobile) {
            document.querySelector('.splide__arrows').style.display = '';
          }
        }

        if (isMobile) {
          container.classList.add('product-images-container--mobile');
        } else {
          container.classList.remove('product-images-container--mobile');
        }

        const progress = document.querySelector('.product-images-progress');
        if (isMobile) {
          progress.classList.add('product-images-progress--mobile');
        } else {
          progress.classList.remove('product-images-progress--mobile');
        }
      }

      initSlider();

      let resizeTimeout;
      window.addEventListener('resize', function () {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(initSlider, 250);
      });
    }

    const tabButtons = document.querySelectorAll('.product-tabs__tab');
    const tabContents = document.querySelectorAll('.product-tabs__content');

    if (tabButtons.length > 0) {
      const descriptionTab = document.querySelector('[data-tab="description"]');
      if (descriptionTab) {
        descriptionTab.classList.add('is-active');
        const descriptionContent = document.querySelector('[data-content="description"]');
        if (descriptionContent) {
          descriptionContent.classList.add('is-active');
        }
      } else if (tabButtons[0]) {
        tabButtons[0].classList.add('is-active');
        const firstTabContent = document.querySelector(`[data-content="${tabButtons[0].dataset.tab}"]`);
        if (firstTabContent) {
          firstTabContent.classList.add('is-active');
        }
      }

      tabButtons.forEach((button) => {
        button.addEventListener('click', function () {
          const tabName = this.dataset.tab;

          tabButtons.forEach((tab) => tab.classList.remove('is-active'));
          tabContents.forEach((content) => content.classList.remove('is-active'));

          this.classList.add('is-active');
          const activeContent = document.querySelector(`[data-content="${tabName}"]`);

          if (activeContent) {
            activeContent.classList.add('is-active');
          }
        });
      });
    }

    function getSelectedVariantOptions() {
      const selectedOptions = [];
      const optionInputs = document.querySelectorAll('.js--variant-option:checked');
      
      optionInputs.forEach(function(input) {
        let value = input.value;
        if (input.name === 'option1' && value.includes('.0')) {
          value = value.replace('.0', '');
        }
        selectedOptions.push(value);
      });
      
      return selectedOptions;
    }

    function getCurrentVariant() {
      const selectedOptions = [];
      const optionInputs = document.querySelectorAll('.js--variant-option:checked');
      
      optionInputs.forEach(function(input) {
        selectedOptions.push(input.value);
      });

      return variants.find(function(variant) {
        return variant.option1 === selectedOptions[0] &&
               variant.option2 === selectedOptions[1] &&
               variant.option3 === selectedOptions[2];
      }) || current_variant;
    }

    function updateStickyProductInfo() {
      const stickyInfo = document.querySelector('.js--sticky-product-info');
      if (!stickyInfo) return;
    
      const selectedOptions = getSelectedVariantOptions();
      const mainPrice = document.querySelector('.js--variant-price');
      
      let variantString = '';
      if (selectedOptions.length > 0) {
        variantString = ' ' + selectedOptions.join(' / ');
      }
      
      const priceString = mainPrice ? ' - ' + mainPrice.textContent.trim() : '';
      
      stickyInfo.innerHTML = '<span class="heading--l">' + product_title + ':</span>' + variantString + priceString;
    }

    function updateStickyPrices() {
      const currentVar = getCurrentVariant();
      const stickyPrice = document.querySelector('.js--sticky-price');
      const stickyComparePrice = document.querySelector('.js--sticky-compare-price');
      const stickyComparePriceContainer = stickyComparePrice ? stickyComparePrice.parentElement : null;
      
      const stickyMobilePrice = document.querySelector('.js--sticky-mobile-price');
      const stickyMobileComparePrice = document.querySelector('.js--sticky-mobile-compare-price');
      
      const mainPrice = document.querySelector('.js--variant-price');
      const mainComparePrice = document.querySelector('.js--variant-compareatprice');
      
      if (stickyPrice && mainPrice) {
        stickyPrice.textContent = mainPrice.textContent;
      }
      
      if (stickyComparePrice && stickyComparePriceContainer) {
        if (mainComparePrice && mainComparePrice.textContent.trim() !== '') {
          stickyComparePrice.textContent = mainComparePrice.textContent;
          stickyComparePrice.style.display = 'inline';
        } else {
          stickyComparePrice.style.display = 'none';
        }
      }
      
      if (stickyMobilePrice && mainPrice) {
        stickyMobilePrice.textContent = mainPrice.textContent;
      }
      
      if (stickyMobileComparePrice) {
        if (mainComparePrice && mainComparePrice.textContent.trim() !== '') {
          stickyMobileComparePrice.textContent = mainComparePrice.textContent;
          stickyMobileComparePrice.style.display = 'inline';
        } else {
          stickyMobileComparePrice.style.display = 'none';
        }
      }
    }

    function scrollToVariantForm() {
      const productDetails = document.querySelector('#product-details');
      const fixedHeader = document.querySelector('.header-fixed'); 
      
      if (productDetails) {
        const rect = productDetails.getBoundingClientRect();
        const headerHeight = fixedHeader ? fixedHeader.offsetHeight : 0;
        const targetPosition = window.pageYOffset + rect.top - headerHeight + 1;
        
        window.scrollTo({
          top: targetPosition,
          behavior: 'smooth'
        });
      }
    }

    function initStickyCartBar() {
      const originalButton = document.querySelector('#js--addtocart');
      const stickyBar = document.querySelector('.sticky-cart-bar');
      const stickyContainer = document.querySelector('.sticky-cart-bar__container');
      
      if (!originalButton || !stickyBar || !stickyContainer) return;

      const clonedButton = originalButton.cloneNode(true);
      stickyContainer.appendChild(clonedButton);

      function isDesktop() {
        return window.innerWidth >= 1100;
      }

      function syncButtons() {
        const originalNotifyButton = document.querySelector('#js--notify-me');
        const klaviyoForm = document.querySelector('.klaviyo-form-WMidEs');
        
        const isNotifyMeVisible = originalNotifyButton && originalNotifyButton.style.display !== 'none';
        const isKlaviyoVisible = klaviyoForm && klaviyoForm.style.display !== 'none' && klaviyoForm.style.display !== '';
        
        if ({{ product.has_only_default_variant | json }}) {
          if (isNotifyMeVisible || isKlaviyoVisible) {
            clonedButton.textContent = 'Notify Me';
            clonedButton.disabled = false;
            clonedButton.className = originalButton.className;
            const originalStyle = originalButton.getAttribute('style');
            if (originalStyle) {
              clonedButton.setAttribute('style', originalStyle);
            }
            clonedButton.style.display = 'flex';
          } else {
            clonedButton.disabled = originalButton.disabled;
            clonedButton.innerHTML = originalButton.innerHTML;
            clonedButton.className = originalButton.className;
            clonedButton.type = originalButton.type;
            clonedButton.name = originalButton.name;
            clonedButton.value = originalButton.value;
            
            Array.from(originalButton.attributes).forEach(attr => {
              if (attr.name !== 'id') { 
                clonedButton.setAttribute(attr.name, attr.value);
              }
            });
            
            const originalStyle = originalButton.getAttribute('style');
            if (originalStyle) {
              clonedButton.setAttribute('style', originalStyle);
            }
          }
        } else {
          if (isNotifyMeVisible || isKlaviyoVisible) {
            clonedButton.textContent = 'Notify Me';
            clonedButton.disabled = false;
            clonedButton.className = originalButton.className;
            const originalStyle = originalButton.getAttribute('style');
            if (originalStyle) {
              clonedButton.setAttribute('style', originalStyle);
            }
            clonedButton.style.display = 'flex';
          } else {
            if ({{ product.gift_card? | json }}) {
              clonedButton.textContent = 'Select Card Amount';
            } else {
              clonedButton.textContent = 'Select Your Size';
            }
            clonedButton.disabled = false;
            clonedButton.className = originalButton.className;
            const originalStyle = originalButton.getAttribute('style');
            if (originalStyle) {
              clonedButton.setAttribute('style', originalStyle);
            }
          }
        }
      }

      function syncAll() {
        syncButtons();
        updateStickyProductInfo();
        updateStickyPrices();
      }

      clonedButton.addEventListener('click', function(e) {
        e.preventDefault();
        const originalNotifyButton = document.querySelector('#js--notify-me');
        const klaviyoForm = document.querySelector('.klaviyo-form-WMidEs');
        
        const isNotifyMeVisible = originalNotifyButton && originalNotifyButton.style.display !== 'none';
        const isKlaviyoVisible = klaviyoForm && klaviyoForm.style.display !== 'none' && klaviyoForm.style.display !== '';
        
        if (isNotifyMeVisible || isKlaviyoVisible) {
          scrollToVariantForm();
          if (isNotifyMeVisible) {
            setTimeout(() => {
              if (originalNotifyButton) {
                originalNotifyButton.click();
              }
            }, 300);
          }
        } else if (!{{ product.has_only_default_variant | json }}) {
          scrollToVariantForm();
        } else {
          originalButton.click();
        }
      });

      function checkButtonPosition() {
        const originalNotifyButton = document.querySelector('#js--notify-me');
        const klaviyoForm = document.querySelector('.klaviyo-form-WMidEs');
        const addToCartButton = document.querySelector('#js--addtocart');
        
        const isNotifyMeVisible = originalNotifyButton && originalNotifyButton.style.display !== 'none';
        const isKlaviyoVisible = klaviyoForm && klaviyoForm.style.display !== 'none' && klaviyoForm.style.display !== '';
        const isAddToCartVisible = addToCartButton && addToCartButton.style.display !== 'none';
        
        let buttonRect;
        if (isKlaviyoVisible) {
          buttonRect = klaviyoForm.getBoundingClientRect();
        } else if (isNotifyMeVisible) {
          buttonRect = originalNotifyButton.getBoundingClientRect();
        } else if (isAddToCartVisible) {
          buttonRect = addToCartButton.getBoundingClientRect();
        } else {
          buttonRect = originalButton.getBoundingClientRect();
        }
        
        const buttonBottom = buttonRect.bottom;
        
        if (buttonBottom < 0) {
          stickyBar.classList.add('is-visible');
        } else {
          stickyBar.classList.remove('is-visible');
        }
      }

      const variantOptions = document.querySelectorAll('.js--variant-option');
      variantOptions.forEach(function(option) {
        option.addEventListener('change', function() {
          setTimeout(syncAll, 10);
        });
      });

      window.addEventListener('scroll', checkButtonPosition);
      window.addEventListener('resize', function() {
        checkButtonPosition();
        syncAll();
      });

      const mutationObserver = new MutationObserver(syncAll);
      mutationObserver.observe(originalButton, {
        attributes: true,
        childList: true,
        subtree: true
      });

      const notifyButton = document.querySelector('#js--notify-me');
      if (notifyButton) {
        const notifyMutationObserver = new MutationObserver(syncAll);
        notifyMutationObserver.observe(notifyButton, {
          attributes: true,
          childList: true,
          subtree: true
        });
      }

      checkButtonPosition();
      syncAll();
    }

    initStickyCartBar();
  });
</script>

{% schema %}
{
  "name": "Product Page",
  "limit": 1,
  "tag": "section",
  "settings": [
    {
      "type": "richtext",
      "id": "shipping_content",
      "label": "Shipping Information",
      "default": "<p>Standard Shipping - Australia Post Network.</p><p>Free Standard shipping on all orders over $99 within Australia.</p><ul><li>Melbourne Metro – expect delivery 1-3 Business Days from Dispatch.</li><li>All other capital cities – delivery is between 3-5 Business Days from Dispatch.</li><li>Regional Australia – allow a little longer, 5-7 Business Days from Dispatch.</li></ul><p>Express shipping - $15 within Australia.</p><ul><li>Metropolitan Cities (Australia) - Guaranteed 1-2 Business Days from Dispatch.</li><li>Regional Australia – 3-4 Business Days from Dispatch. </li></ul>"
    },
    {
      "type": "checkbox",
      "id": "show_low_stock_warning",
      "label": "Show low stock warning",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_usps",
      "label": "Show USP's",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "round_cta",
      "label": "Round CTA Button Corners",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_afterpay",
      "label": "Afterpay",
      "default": false
    }
  ],
  "blocks": [
    {
      "type": "@app"
    },
    {
      "type": "options",
      "name": "Product options",
      "limit": 1,
      "settings": []
    },
    {
      "type": "prices",
      "name": "Prices",
      "settings": []
    },
    {
      "type": "button",
      "name": "Add to cart",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "button_label",
          "label": "Button Label",
          "default": "Add To Cart"
        }
      ]
    }
  ],
  "enabled_on": {
    "templates": ["product"]
  }
}
{% endschema %}
