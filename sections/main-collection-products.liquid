{% comment %}
  Collection Products - Fixed Version with Scroll Preservation
{% endcomment %}

<script src="{{ 'ajaxinate.min.js' | asset_url }}" defer></script>

<style>
  #collection {
    display: grid;
    grid-template-columns: auto;
    border-bottom: 1px solid var(--neutral-200);
  }

  .collection-controls {
    display: flex;
    justify-content: space-between;
    align-items: stretch;
    padding: var(--space-m);
    padding-top: var(--space-s);
    gap: var(--space-xs);
  }

  .collection-controls.controls-fixed {
    position: fixed;
    top: calc(var(--space-xl) - 50px);
    left: 0;
    right: 0;
    z-index: 9995;
    background-color: white;
    opacity: 0;
    padding: 0px;
    animation: slideDown 0.3s ease forwards;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    backface-visibility: hidden;
  }

  .collection-controls.controls-fixed.sliding-up {
    animation: slideUp 0.3s ease forwards;
  }

  @keyframes slideDown {
    from {
      top: calc(var(--space-xl) - 50px);
      opacity: 0;
    }
    to {
      top: var(--space-xl);
      opacity: 1;
    }
  }

  @keyframes slideUp {
    from {
      top: var(--space-xl);
      opacity: 1;
    }
    to {
      top: calc(var(--space-xl) - 50px);
      opacity: 0;
    }
  }

  .collection-controls.controls-fixed > p,
  .collection-controls.controls-fixed > .collection-controls__actions {
    display: none;
  }

  .collection-controls.controls-fixed > .collection-controls__filter-button {
    border: none;
    width: 100%;
    display: flex;
    justify-content: space-between;
    padding: var(--space-2xs) var(--space-m);
    background-color: var(--neutral-950);
    color: var(--white);
  }

  .collection-controls.controls-fixed > .collection-controls__filter-button > span {
    filter: invert(1);
  }

  #controls-spacer {
    display: block;
  }

  #controls-spacer.hide {
    display: none;
  }

  .collection-controls > p {
    margin-left: auto;
    color: var(--neutral-600);
    align-self: center;
  }

  .collection-controls__filter-button {
    background-color: transparent;
    cursor: pointer;
    padding: var(--space-2xs) var(--space-s);
    border: 1px solid var(--neutral-200);
    color: var(--neutral-950);
    transition: 0.3 ease-in;
  }

  .collection-controls__actions {
    display: flex;
    gap: var(--space-s);
    align-items: center;
  }

  .filter-sidebar {
    position: fixed;
    top: calc(var(--space-xl) + 35px);
    bottom: 0;
    left: 0;
    width: 400px;
    background-color: var(--white);
    z-index: 9998;
    overflow-y: hidden;
    transform: translateX(-100%);
    opacity: 0;
    transition: transform 0.3s ease;
    animation: slideIn 0.3s ease forwards;
  }

  @keyframes slideIn {
    from {
      transform: translateX(-100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  .filter-sidebar.closing {
    animation: slideOut 0.3s ease forwards;
  }

  @keyframes slideOut {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(-100%);
      opacity: 0;
    }
  }

  .filter-sidebar__overlay {
    position: fixed;
    top: calc(var(--space-xl) + 35px);
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 9997;
  }

  .products-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: var(--space-2xs);
    overflow: hidden;
  }

  .products-grid--cols-1 {
    grid-template-columns: 1fr !important;
  }

  .products-grid--cols-2 {
    grid-template-columns: repeat(2, 1fr) !important;
  }

  .products-grid--cols-2 > .grid-content {
    min-height: 850px !important;
  }

  .products-grid--cols-4 {
    grid-template-columns: repeat(4, 1fr) !important;
  }

  .product-card {
    display: block;
    position: relative;
    height: 100%;
    overflow: hidden;
    contain: layout style paint;
  }

  .product-card__image-link {
    display: block;
  }

  .product-card__image-wrapper {
    position: relative;
    width: 100%;
    overflow: hidden;
    background-color: var(--neutral-50);
    contain: paint;
  }

  .product-card__discount-code-prominent {
    display: block;
    position: absolute;
    top: var(--space-xs);
    left: var(--space-xs);
    color: var(--white);
    background-color: var(--neutral-950);
    text-align: center;
    padding: var(--space-3xs) var(--space-xs);
    width: auto;
  }

  .product-card__image {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .product-card__content {
    padding: var(--space-xs) var(--space-m);
    display: flex;
    flex-direction: column;
    gap: var(--space-2xs);
  }

  .product-card__title {
    color: var(--neutral-950);
  }

  .product-card__title-link {
    text-decoration: none;
  }

  .product-card__material {
    color: var(--neutral-600);
  }

  .product-card__title,
  .product-card__material,
  .product-card__price {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .product-card__price {
    margin-top: auto;
  }

  .product-card__slider-wrapper {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
  }

  .product-card__slider {
    width: 100%;
    height: auto;
  }

  .product-card__slider .splide__track,
  .product-card__slider .splide__list,
  .product-card__slider .splide__slide {
    height: auto;
  }

  .product-card__slider .splide__slide img {
    width: 100%;
    height: auto;
  }

  .product-card__slider .splide__arrows {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
    pointer-events: none;
  }

  .product-card__slider .splide__arrow {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    pointer-events: auto;
    cursor: pointer;
    width: var(--space-l);
    height: 100%;
  }

  .product-card__slider .splide__arrow--prev {
    left: calc(var(--space-3xs) - 6px);
  }

  .product-card__slider .splide__arrow--next {
    right: calc(var(--space-3xs) - 6px);
  }

  .product-card__slider .splide__arrow:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  .product-card__slider .splide__progress {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background: transparent;
    z-index: 2;
  }

  .product-card__slider .splide__progress__bar {
    background: var(--neutral-950);
    height: 2px;
    transition: width 300ms ease;
    width: 0;
  }

  .grid-content {
    position: relative;
    overflow: hidden;
    color: var(--white);
    display: flex;
    flex-direction: column;
    justify-content: center;
    min-height: 350px;
    grid-column: span 2;
  }

  .grid-content__background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
  }

  .grid-content__background--image {
    background-size: cover;
    background-position: top center;
  }

  .grid-content__background--video {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .grid-content__background--video video {
    min-width: 100%;
    min-height: 100%;
    object-fit: cover;
    position: absolute;
  }

  .grid-content__container {
    position: relative;
    z-index: 2;
    padding: var(--space-m);
    text-align: center;
    display: grid;
    margin-top: auto;
  }

  .grid-content__header {
    margin-bottom: var(--space-xs);
  }

  .grid-content__description {
    margin-bottom: var(--space-s);
  }

  .grid-content__container--left {
    text-align: left;
    justify-items: start;
  }

  .grid-content__description {
    max-width: 80ch;
  }

  .grid-toggle-btn {
    background-color: transparent;
    padding: var(--space-2xs);
    border: 1px solid var(--neutral-200);
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
  }

  .grid-toggle-btn > span {
    vertical-align: middle;
    height: 14px;
    display: inline-block;
  }

  .grid-toggle-btn > span > svg {
    vertical-align: baseline;
  }

  .product-card__price--compare {
    text-decoration: line-through;
    color: var(--neutral-600);
    margin-left: var(--space-2xs);
  }

  .product-card__discount-code-desktop {
    color: var(--neutral-400);
    margin-left: var(--space-2xs);
  }

  .product-card__discount-code-mobile {
    display: none;
    color: var(--neutral-400);
  }

  #AjaxinatePagination {
    margin: var(--space-m);
  }

  .no-products-message {
    grid-column: 1 / -1;
    text-align: center;
    padding: var(--space-xl);
    background-color: var(--neutral-50);
  }

  @media (max-width: 768px) {
    .products-grid {
      grid-template-columns: repeat(2, 1fr);
    }

    .products-grid--cols-2 {
      grid-template-columns: 1fr !important;
    }

    .products-grid--cols-4 {
      grid-template-columns: repeat(2, 1fr) !important;
    }

    .products-grid--cols-2 .grid-content {
      grid-column: span 1;
    }

    .grid-content__container {
      padding-bottom: var(--space-xl);
      text-align: left;
      justify-items: start;
    }

    .product-card__discount-code-desktop {
      display: none;
    }

    .product-card__discount-code-mobile {
      display: block;
    }

    .product-card__discount-code-prominent {
      display: block;
      position: absolute;
      top: auto;
      bottom: 0px;
      left: 0px;
      width: 100%;
      color: var(--white);
      background-color: var(--neutral-950);
      text-align: center;
      padding: var(--space-3xs);
    }
  }
</style>

<div
  id="{{ section.id }}"
  class="section-wrap"
  x-data="
    {
      expandedGrid: true,
      isFilterOpen: false,
      scrollY: 0,

      openFilter() {
        this.scrollY = window.scrollY;
        console.log('=== OPENING FILTER - Current scroll:', this.scrollY);

        // Get the correct fixed elements
        const siteHeader = document.querySelector('#site-header.header-fixed');
        const collectionControlsFixed = document.querySelector('.collection-controls.controls-fixed');
        const filterSidebar = document.querySelector('.filter-sidebar');
        const filterOverlay = document.querySelector('.filter-sidebar__overlay');

        console.log('--- FIXED ELEMENT DETECTION ---');
        console.log('Fixed header found:', !!siteHeader);
        console.log('Fixed controls found:', !!collectionControlsFixed);

        let requiredFilterTop = 0;

        // Check header state before body fix
        if (siteHeader) {
          console.log('--- FIXED HEADER BEFORE BODY FIX ---');
          console.log('Header position before:', getComputedStyle(siteHeader).position);
          console.log('Header top before:', getComputedStyle(siteHeader).top);
          console.log('Header z-index before:', getComputedStyle(siteHeader).zIndex);
          console.log('Header rect before:', siteHeader.getBoundingClientRect());
        }

        // Check controls state before body fix
        if (collectionControlsFixed) {
          console.log('--- FIXED CONTROLS BEFORE BODY FIX ---');
          console.log('Controls position before:', getComputedStyle(collectionControlsFixed).position);
          console.log('Controls top before:', getComputedStyle(collectionControlsFixed).top);
          console.log('Controls z-index before:', getComputedStyle(collectionControlsFixed).zIndex);
          console.log('Controls rect before:', collectionControlsFixed.getBoundingClientRect());
        }

        if (siteHeader && collectionControlsFixed) {
          // Both header and controls are fixed
          const headerHeight = siteHeader.getBoundingClientRect().height;
          const controlsHeight = collectionControlsFixed.getBoundingClientRect().height;
          requiredFilterTop = headerHeight + controlsHeight;
          console.log('Both fixed - Filter top will be:', requiredFilterTop);
        } else if (siteHeader) {
          // Only header is fixed
          const headerHeight = siteHeader.getBoundingClientRect().height;
          requiredFilterTop = headerHeight;
          console.log('Header fixed - Filter top will be:', requiredFilterTop);
        } else {
          // Header is not fixed - use regular header
          const regularHeader = document.querySelector('#site-header');
          if (regularHeader) {
            const headerRect = regularHeader.getBoundingClientRect();
            requiredFilterTop = Math.max(0, headerRect.bottom);
            console.log('Header not fixed - Filter top will be:', requiredFilterTop);
          }
        }

        // Fix body for scroll preservation
        console.log('--- FIXING BODY POSITION ---');
        document.body.style.position = 'fixed';
        document.body.style.top = `-${this.scrollY}px`;
        document.body.style.width = '100%';
        console.log('Body fixed with top:', `-${this.scrollY}px`);

        // Boost z-index of fixed elements so they stay above the filter overlay
        if (siteHeader) {
          siteHeader.style.zIndex = '9999';
          console.log('Boosted header z-index to 9999');
        }

        if (collectionControlsFixed) {
          collectionControlsFixed.style.zIndex = '9999';
          console.log('Boosted controls z-index to 9999');
        }

        // Check what happened to FIXED header after body fix
        if (siteHeader) {
          console.log('--- FIXED HEADER AFTER BODY FIX ---');
          console.log('Header position after:', getComputedStyle(siteHeader).position);
          console.log('Header top after:', getComputedStyle(siteHeader).top);
          console.log('Header z-index after:', getComputedStyle(siteHeader).zIndex);
          console.log('Header opacity after:', getComputedStyle(siteHeader).opacity);
          console.log('Header display after:', getComputedStyle(siteHeader).display);
          console.log('Header visibility after:', getComputedStyle(siteHeader).visibility);
          console.log('Header rect after:', siteHeader.getBoundingClientRect());
          console.log('Header visible in viewport?', siteHeader.getBoundingClientRect().top >= 0 && siteHeader.getBoundingClientRect().bottom <= window.innerHeight);
        }

        // Check what happened to FIXED controls after body fix
        if (collectionControlsFixed) {
          console.log('--- FIXED CONTROLS AFTER BODY FIX ---');
          console.log('Controls position after:', getComputedStyle(collectionControlsFixed).position);
          console.log('Controls top after:', getComputedStyle(collectionControlsFixed).top);
          console.log('Controls z-index after:', getComputedStyle(collectionControlsFixed).zIndex);
          console.log('Controls opacity after:', getComputedStyle(collectionControlsFixed).opacity);
          console.log('Controls display after:', getComputedStyle(collectionControlsFixed).display);
          console.log('Controls visibility after:', getComputedStyle(collectionControlsFixed).visibility);
          console.log('Controls rect after:', collectionControlsFixed.getBoundingClientRect());
          console.log('Controls visible in viewport?', collectionControlsFixed.getBoundingClientRect().top >= 0 && collectionControlsFixed.getBoundingClientRect().bottom <= window.innerHeight);
        }

        // Check filter z-indexes too
        console.log('--- FILTER Z-INDEXES ---');
        if (filterSidebar) {
          console.log('Filter sidebar z-index:', getComputedStyle(filterSidebar).zIndex);
        }
        if (filterOverlay) {
          console.log('Filter overlay z-index:', getComputedStyle(filterOverlay).zIndex);
        }

        // Apply the calculated positioning to filter elements
        if (filterSidebar) {
          filterSidebar.style.top = `${requiredFilterTop}px`;
          console.log('Set filter sidebar top to:', requiredFilterTop + 'px');
        }

        if (filterOverlay) {
          filterOverlay.style.top = `${requiredFilterTop}px`;
          console.log('Set filter overlay top to:', requiredFilterTop + 'px');
        }

        this.isFilterOpen = true;
        console.log('=== FILTER OPENED ===');
      },

      closeFilter() {
        if (!this.isFilterOpen) return;
        document.querySelector('.filter-sidebar').classList.add('closing');
        setTimeout(() => {
          this.isFilterOpen = false;

          // Reset z-index of fixed elements
          const siteHeader = document.querySelector('#site-header.header-fixed');
          const collectionControlsFixed = document.querySelector('.collection-controls.controls-fixed');

          if (siteHeader) {
            siteHeader.style.zIndex = '';
            console.log('Reset header z-index');
          }

          if (collectionControlsFixed) {
            collectionControlsFixed.style.zIndex = '';
            console.log('Reset controls z-index');
          }

          // Reset filter positioning
          const filterSidebar = document.querySelector('.filter-sidebar');
          const filterOverlay = document.querySelector('.filter-sidebar__overlay');

          if (filterSidebar) {
            filterSidebar.style.top = '';
          }

          if (filterOverlay) {
            filterOverlay.style.top = '';
          }

          document.body.style.position = '';
          document.body.style.top = '';
          document.body.style.width = '';
          window.scrollTo(0, this.scrollY);
          document.querySelector('.filter-sidebar').classList.remove('closing');
          console.log('Filter closed and positioning reset');
        }, 300);
      }
    }
  "
  x-init="
    document.addEventListener('menu-open', () => {
      this.closeFilter();
    });

    // Close filter when clicking outside
    document.addEventListener('click', (e) => {
      if (this.isFilterOpen && !e.target.closest('.filter-sidebar') && !e.target.closest('.collection-controls__filter-button')) {
        this.closeFilter();
      }
    });

    window.closeFilter = () => this.closeFilter();
  "
>
  <div id="collection" class="section">
    <div x-show="isFilterOpen" x-cloak>
      <div
        class="filter-sidebar__overlay"
        @click="closeFilter()"
      ></div>
      <aside class="filter-sidebar">
        <div class="filter-sidebar-header">
          <h3 class="heading--xl">Filters</h3>
          <p>
            <a class="body" href="{{ collection.url }}?sort_by={{ collection.sort_by }}">Clear all</a>
          </p>
          <button
            class="filter-close-btn"
            @click="closeFilter()"
            aria-label="Close filters"
          >
            {% render 'icon-close' %}
          </button>
        </div>
        {% render 'collection-filters' %}
      </aside>
    </div>
    {% liquid
      assign has_grid_content = false

      if collection.metafields.custom.collection_grid_content != blank
        assign has_grid_content = true
        for filter in collection.filters
          for active_filter in filter.active_values
            assign has_grid_content = false
            break
          endfor
          if has_grid_content == false
            break
          endif
        endfor

        if has_grid_content
          assign metaobject_raw = collection.metafields.custom.collection_grid_content.value
        endif
      endif

      assign original_limit = section.settings.limit | plus: 0

      assign grid_position = 3
      if has_grid_content and metaobject_raw.grid_position != blank
        assign grid_position = metaobject_raw.grid_position | plus: 0
      endif

      assign actual_position = grid_position

      if grid_position > original_limit
        assign actual_position = original_limit
      endif

      if actual_position < 1
        assign actual_position = 1
      endif

      assign is_even = actual_position | modulo: 2
      if is_even == 0
        assign actual_position = actual_position | minus: 1
        if actual_position < 1
          assign actual_position = 1
        endif
      endif
    %}
    {% paginate collection.products by original_limit %}
      <div>
        <div class="section">
          <div class="collection-controls">
            <button
              class="collection-controls__filter-button body"
              @click="openFilter()"
            >
              Filters
              <span>{% render 'icon-filter' %}</span>
            </button>

            <p class="body">
              {{ collection.products_count }}
              {% if collection.products_count == 1 %}Product{% else %}Products{% endif %}
            </p>

            <div class="collection-controls__actions">
              <button
                aria-label="Change the grid view"
                class="btn grid-toggle-btn"
                @click="expandedGrid = !expandedGrid"
                x-data="{ isMobile: window.innerWidth < 768 }"
                x-init="
                  window.addEventListener('resize', () => {
                    isMobile = window.innerWidth < 768;
                  })
                "
              >
                <span x-cloak x-show="!isMobile && expandedGrid">{% render 'icon-grid-2' %}</span>
                <span x-cloak x-show="!isMobile && !expandedGrid">{% render 'icon-grid-4' %}</span>

                <span x-cloak x-show="isMobile && expandedGrid">{% render 'icon-grid-1' %}</span>
                <span x-cloak x-show="isMobile && !expandedGrid">{% render 'icon-grid-2' %}</span>
              </button>
            </div>
          </div>

          <div
            id="AjaxinateContainer"
            class="products-grid animate-container-cards-scroll"
            :class="
              {
                'products-grid--cols-2': !expandedGrid,
                'products-grid--cols-4': expandedGrid
              }
            "
          >
            {% if collection.products.size == 0 %}
              <div class="no-products-message">
                <p class="heading--l" style="color: var(--neutral-950)">Sorry, there are no products to show</p>
                <p class="body">
                  Try adjusting your filters or
                  <a href="/" style="color: var(--neutral-950)">return home</a>
                </p>
              </div>
            {% else %}
              {% assign inserted = false %}
              {% for product in collection.products %}
                {% assign current_position = forloop.index %}

                {% if current_position == actual_position
                  and inserted == false
                  and paginate.current_page == 1
                  and has_grid_content
                %}
                  <div class="grid-content">
                    {% if metaobject_raw.image_or_video != blank %}
                      {% if metaobject_raw.image_or_video.value.media_type == 'video' %}
                        <div class="grid-content__background grid-content__background--video">
                          <video autoplay muted loop playsinline>
                            <source src="{{ metaobject_raw.image_or_video | file_url }}" type="video/mp4">
                          </video>
                        </div>
                      {% else %}
                        <div
                          class="grid-content__background grid-content__background--image"
                          style="background-image: url('{{ metaobject_raw.image_or_video | image_url: width: 1200 }}');"
                        ></div>
                      {% endif %}
                    {% endif %}

                    <div class="grid-content__container grid-content__container--left">
                      {% if metaobject_raw.leading_text != blank %}
                        <p class="heading--l grid-content__leading-text">{{ metaobject_raw.leading_text }}</p>
                      {% endif %}

                      <h2 class="heading--2xl grid-content__header">{{ metaobject_raw.header }}</h2>

                      <div class="body grid-content__description">{{ metaobject_raw.description }}</div>

                      {% if metaobject_raw.link != blank %}
                        {{
                          metaobject_raw.link
                          | metafield_tag
                          | replace: 'class="', 'class="button button--white body'
                        }}
                      {% endif %}
                    </div>
                  </div>
                  {% assign inserted = true %}
                {% endif %}

                {% render 'product-card',
                  product: product,
                  image_width: 520,
                  prominent_discount_mobile: section.settings.prominent_discount_mobile
                %}
              {% endfor %}

              {% if inserted == false and paginate.current_page == 1 and has_grid_content %}
                <div class="grid-content">
                  {% if metaobject_raw.image_or_video != blank %}
                    {% if metaobject_raw.image_or_video.value.media_type == 'video' %}
                      <div class="grid-content__background grid-content__background--video">
                        <video autoplay muted loop playsinline>
                          <source src="{{ metaobject_raw.image_or_video | file_url }}" type="video/mp4">
                        </video>
                      </div>
                    {% else %}
                      <div
                        class="grid-content__background grid-content__background--image"
                        style="background-image: url('{{ metaobject_raw.image_or_video | image_url: width: 1200 }}');"
                      ></div>
                    {% endif %}
                  {% endif %}

                  <div class="grid-content__container grid-content__container--left">
                    {% if metaobject_raw.leading_text != blank %}
                      <p class="heading--l grid-content__leading-text">{{ metaobject_raw.leading_text }}</p>
                    {% endif %}

                    <h2 class="heading--2xl grid-content__header">{{ metaobject_raw.header }}</h2>

                    <div class="body grid-content__description">{{ metaobject_raw.description }}</div>

                    {% if metaobject_raw.link != blank %}
                      {{ metaobject_raw.link | metafield_tag | replace: 'class="', 'class="button button--white body' }}
                    {% endif %}
                  </div>
                </div>
              {% endif %}
            {% endif %}
          </div>
          <div id="AjaxinatePagination">
            {% if paginate.next %}
              <a aria-label="Loading More" href="{{ paginate.next.url }}"></a>
            {% endif %}
          </div>
        </div>
      </div>
    {% endpaginate %}
  </div>
</div>

{% javascript %}
  window.addEventListener('load', function () {
    var endlessScroll = new Ajaxinate({
      method: 'scroll',
      container: '#AjaxinateContainer',
      pagination: '#AjaxinatePagination',
      offset: '400',
      loadingText:
        '<div style="margin: auto 0; display:flex;justify-content:center;align-items:center;padding:var(--space-m) 0;width:100%;height:1px;overflow:hidden"><svg fill=#E7E7E7 height=1 style=max-width:300px viewBox="0 0 100 1"width=100% xmlns=http://www.w3.org/2000/svg><style>.react{animation:moving 1s ease-in-out infinite;transform-origin:0 50%}@keyframes moving{0%{width:0%}50%{width:100%;transform:translateX(0)}100%{width:0;transform:translateX(100%)}}</style><rect class=react fill=#E7E7E7 height=1 width=100% /></svg></div>',
    });

    document.addEventListener(
      'click',
      function (event) {
        if (event.target.closest('.splide__arrow')) {
          event.preventDefault();
        }
      },
      true
    );

    document.querySelectorAll('[x-data]').forEach((el) => {
      if (el.hasAttribute('x-data') && el.__x) {
        if (el.__x.$data.hasOwnProperty('isMobile')) {
          el.__x.$data.isMobile = window.innerWidth < 768;
        }
      }
    });
  });
{% endjavascript %}

{% schema %}
{
  "name": "Products",
  "limit": 1,
  "tag": "section",
  "class": "collection-products-section",
  "settings": [
    {
      "type": "paragraph",
      "content": "Display current collection's products."
    },
    {
      "type": "range",
      "id": "limit",
      "label": "Products",
      "info": "Determines how many products to show before loading more.",
      "min": 4,
      "max": 16,
      "step": 1,
      "default": 8
    },
    {
      "type": "checkbox",
      "id": "prominent_discount_mobile",
      "label": "Show prominent discount codes",
      "info": "Display discount codes as overlay badges on product images",
      "default": false
    }
  ],
  "enabled_on": {
    "templates": ["collection"]
  }
}
{% endschema %}
