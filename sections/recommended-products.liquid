{% comment %}
  Recommended Products Section
{% endcomment %}

<style>
  .recommended-products {
    padding: var(--space-2xl) 0;
    overflow: hidden;
    border-bottom: 1px solid var(--neutral-200);
  }

  .recommended-products__container {
    display: flex;
    flex-direction: column;
    width: 100%;
    overflow: visible;
  }

  .recommended-products__content {
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding: 0 var(--space-m);
    margin-bottom: var(--space-xl);
  }

  .recommended-products__heading {
    margin-bottom: var(--space-2xs);
    color: var(--neutral-950);
  }

  .recommended-products__description {
    max-width: 80ch;
    margin-bottom: var(--space-l);
    color: var(--neutral-600);
  }

  .recommended-products__slider-wrapper {
    overflow: visible;
    width: 100vw;
    margin-left: calc(-50vw + 50%);
  }

  .recommended-products__slider {
    width: 100%;
  }

  .recommended-products__product-link {
    display: block;
    text-decoration: none;
    color: var(--neutral-950);
  }

  .recommended-products__product-image-wrapper {
    margin-bottom: var(--space-xs);
    overflow: hidden;
    background-color: var(--neutral-50);
  }

  .recommended-products__product-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .recommended-products__product-title {
    margin: var(--space-xs) 0 var(--space-2xs);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    color: var(--neutral-950);
    padding-left: var(--space-m);
  }

  .recommended-products__product-material {
    margin-bottom: var(--space-2xs);
    color: var(--neutral-600);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    padding-left: var(--space-m);
  }

  .recommended-products__product-price {
    padding-left: var(--space-m);
  }

  .recommended-products__product-price--compare {
    text-decoration: line-through;
    color: var(--neutral-600);
    margin-left: var(--space-2xs);
  }

  .recommended-products__loading-dots {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: var(--space-xl) 0;
    gap: var(--space-xs);
  }

  .recommended-products__loading-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: var(--neutral-400);
    animation: recommended-products-loading 1.4s ease-in-out infinite both;
  }

  .recommended-products__loading-dot:nth-child(1) {
    animation-delay: -0.32s;
  }

  .recommended-products__loading-dot:nth-child(2) {
    animation-delay: -0.16s;
  }

  @keyframes recommended-products-loading {
    0%,
    80%,
    100% {
      transform: scale(0);
    }
    40% {
      transform: scale(1);
    }
  }

  @media screen and (max-width: 768px) {
    .recommended-products__slider {
      padding: 0px var(--space-m);
    }

    .recommended-products__product-price {
      padding-left: 0px;
    }

    .recommended-products__product-title {
      padding-left: 0px;
    }

    .recommended-products__product-material {
      padding-left: 0px;
    }

    .recommended-products {
      padding-top: var(--space-xl);
      padding-bottom: var(--space-xl);
    }

    .recommended-products__content {
      margin-bottom: var(--space-xl);
    }

    .recommended-products__product-title {
      width: calc(100% - var(--space-m));
    }
  }

  @media screen and (max-width: 470px) {
    .recommended-products__slider-wrapper {
      overflow: hidden;
    }
  }
</style>

<div class="recommended-products-test" id="section-{{ section.id }}">
  <h2>Testing Recommendations Object Access</h2>

  <!-- Approach 1: Direct recommendations object -->
  <div>
    <h3>Approach 1: Direct recommendations</h3>
    <p>recommendations: {{ recommendations }}</p>
    <p>recommendations.products: {{ recommendations.products }}</p>
    <p>recommendations.products_count: {{ recommendations.products_count }}</p>
    <p>recommendations.performed: {{ recommendations.performed }}</p>
  </div>

  <!-- Approach 2: Check if object exists -->
  <div>
    <h3>Approach 2: Checking existence</h3>
    {% if recommendations %}
      <p>✅ recommendations object exists</p>
      {% if recommendations.products %}
        <p>✅ recommendations.products exists with {{ recommendations.products.size }} items</p>
      {% else %}
        <p>❌ recommendations.products is empty or doesn't exist</p>
      {% endif %}
    {% else %}
      <p>❌ recommendations object doesn't exist</p>
    {% endif %}
  </div>

  <!-- Approach 3: Try product.related_products -->
  <div>
    <h3>Approach 3: product.related_products</h3>
    {% if product.related_products %}
      <p>✅ product.related_products exists with {{ product.related_products.size }} items</p>
    {% else %}
      <p>❌ product.related_products doesn't exist</p>
    {% endif %}
  </div>

  <!-- Approach 4: Try collections approach -->
  <div>
    <h3>Approach 4: Same collection products</h3>
    {% if product.collections.first %}
      <p>
        First collection: {{ product.collections.first.title }} with
        {{ product.collections.first.products.size }} products
      </p>
    {% endif %}
  </div>

  <!-- Approach 5: Try product recommendations via routes -->
  <div>
    <h3>Approach 5: Routes object</h3>
    <p>routes.product_recommendations_url: {{ routes.product_recommendations_url }}</p>
  </div>

  <!-- Approach 6: Try global objects -->
  <div>
    <h3>Approach 6: Check template and request</h3>
    <p>template.name: {{ template.name }}</p>
    <p>request.page_type: {{ request.page_type }}</p>
    <p>product.id: {{ product.id }}</p>
  </div>

  <!-- Approach 7: Try shop object -->
  <div>
    <h3>Approach 7: Shop object</h3>
    <p>shop.name: {{ shop.name }}</p>
  </div>

  <!-- Approach 8: Try all_products approach -->
  <div>
    <h3>Approach 8: all_products sample</h3>
    {% assign sample_products = collections.all.products | limit: 3 %}
    {% if sample_products.size > 0 %}
      <p>✅ Found {{ sample_products.size }} sample products from all collection</p>
    {% endif %}
  </div>

  <!-- Approach 9: Try with assign -->
  <div>
    <h3>Approach 9: Assign and check</h3>
    {% assign rec_products = recommendations.products %}
    {% assign rec_count = recommendations.products_count %}
    <p>Assigned rec_products: {{ rec_products }}</p>
    <p>Assigned rec_count: {{ rec_count }}</p>
  </div>

  <!-- Approach 10: Raw output -->
  <div>
    <h3>Approach 10: Raw recommendations</h3>
    <pre>{{ recommendations | json }}</pre>
  </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
      const recommendedProductsSection = document.querySelector('#section-{{ section.id }}');
      const splideElement = recommendedProductsSection.querySelector('.recommended-products__slider');
  
      // Function to initialize Splide slider
      function initializeSlider() {
        if (splideElement && splideElement.querySelector('.splide__list').children.length > 0) {
          new Splide(splideElement, {
            perPage: 4,
            type: 'loop',
            gap: 'var(--space-2xs)',
            arrows: false,
            pagination: false,
            drag: true,
            snap: true,
            breakpoints: {
              470: {
                perPage: 1,
              },
              768: {
                perPage: 2,
                arrows: true,
              },
            },
          }).mount();
        }
      }
  
      // Load recommendations if not already performed
      if (!recommendedProductsSection.querySelector('.recommended-products__slider .splide__list')) {
        const baseUrl = '{{ routes.product_recommendations_url }}';
        const productId = '{{ product.id }}';
        const sectionId = '{{ section.id }}';
        const limit = {{ section.settings.products_to_show | default: 10 }};
        const intent = '{{ section.settings.recommendation_intent | default: "related" }}';
        
        const url = `${baseUrl}?section_id=${sectionId}&product_id=${productId}&limit=${limit}&intent=${intent}`;
        
        fetch(url)
          .then(response => response.text())
          .then(html => {
            const parser = new DOMParser();
            const newDocument = parser.parseFromString(html, 'text/html');
            const newSection = newDocument.querySelector('#section-{{ section.id }}');
            
            if (newSection) {
              recommendedProductsSection.innerHTML = newSection.innerHTML;
              initializeSlider();
            }
          })
          .catch(error => {
            console.error('Error loading recommendations:', error);
            // Hide loading dots on error
            const loadingDots = recommendedProductsSection.querySelector('.recommended-products__loading-dots');
            if (loadingDots) {
              loadingDots.style.display = 'none';
            }
          });
      } else {
        initializeSlider();
      }
    });
</script>

{% schema %}
{
  "name": "Recommended Products",
  "tag": "section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "You May Also Like"
    },
    {
      "type": "select",
      "id": "heading_animation",
      "label": "Heading Animation",
      "options": [
        {
          "value": "none",
          "label": "None"
        },
        {
          "value": "animate-word-slide-up-scroll",
          "label": "Slide Up Words"
        },
        {
          "value": "animate-word-rotate-scroll",
          "label": "Rotate In Words"
        },
        {
          "value": "animate-paragraph-slide-up-scroll",
          "label": "Slide Up"
        }
      ],
      "default": "none"
    },
    {
      "type": "textarea",
      "id": "description",
      "label": "Description",
      "default": "Discover products that perfectly complement your selection."
    },
    {
      "type": "select",
      "id": "description_animation",
      "label": "Description Animation",
      "options": [
        {
          "value": "none",
          "label": "None"
        },
        {
          "value": "animate-word-slide-up-scroll",
          "label": "Slide Up Words"
        },
        {
          "value": "animate-word-rotate-scroll",
          "label": "Rotate In Words"
        },
        {
          "value": "animate-paragraph-slide-up-scroll",
          "label": "Slide Up"
        }
      ],
      "default": "none"
    },
    {
      "type": "select",
      "id": "recommendation_intent",
      "label": "Recommendation Type",
      "options": [
        {
          "value": "related",
          "label": "Related Products"
        },
        {
          "value": "complementary",
          "label": "Complementary Products"
        }
      ],
      "default": "related",
      "info": "Related products are similar items, complementary products are items often bought together"
    },
    {
      "type": "range",
      "id": "products_to_show",
      "min": 3,
      "max": 12,
      "step": 1,
      "default": 10,
      "label": "Maximum products to show"
    },
    {
      "type": "header",
      "content": "Animation Settings"
    },
    {
      "type": "checkbox",
      "id": "animate_products",
      "label": "Animate Products",
      "default": false,
      "info": "Adds a staggered animation to products as they scroll into view"
    }
  ],
  "presets": [
    {
      "name": "Recommended Products",
      "category": "Product"
    }
  ],
  "enabled_on": {
    "templates": ["product"]
  }
}
{% endschema %}
