{% comment %}
  Recommended Products Section
{% endcomment %}

<style>
  .recommended-products {
    padding: var(--space-2xl) 0;
    overflow: hidden;
    border-bottom: 1px solid var(--neutral-200);
  }

  .recommended-products__container {
    display: flex;
    flex-direction: column;
    width: 100%;
    overflow: visible;
  }

  .recommended-products__content {
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding: 0 var(--space-m);
    margin-bottom: var(--space-xl);
  }

  .recommended-products__heading {
    margin-bottom: var(--space-2xs);
    color: var(--neutral-950);
  }

  .recommended-products__description {
    max-width: 80ch;
    margin-bottom: var(--space-l);
    color: var(--neutral-600);
  }

  .recommended-products__slider-wrapper {
    overflow: visible;
    width: 100vw;
    margin-left: calc(-50vw + 50%);
  }

  .recommended-products__slider {
    width: 100%;
  }

  .recommended-products__product-link {
    display: block;
    text-decoration: none;
    color: var(--neutral-950);
  }

  .recommended-products__product-image-wrapper {
    margin-bottom: var(--space-xs);
    overflow: hidden;
    background-color: var(--neutral-50);
  }

  .recommended-products__product-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .recommended-products__product-title {
    margin: var(--space-xs) 0 var(--space-2xs);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    color: var(--neutral-950);
    padding-left: var(--space-m);
  }

  .recommended-products__product-material {
    margin-bottom: var(--space-2xs);
    color: var(--neutral-600);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    padding-left: var(--space-m);
  }

  .recommended-products__product-price {
    padding-left: var(--space-m);
  }

  .recommended-products__product-price--compare {
    text-decoration: line-through;
    color: var(--neutral-600);
    margin-left: var(--space-2xs);
  }

  .recommended-products__loading-dots {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: var(--space-xl) 0;
    gap: var(--space-xs);
  }

  .recommended-products__loading-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: var(--neutral-400);
    animation: recommended-products-loading 1.4s ease-in-out infinite both;
  }

  .recommended-products__loading-dot:nth-child(1) {
    animation-delay: -0.32s;
  }

  .recommended-products__loading-dot:nth-child(2) {
    animation-delay: -0.16s;
  }

  @keyframes recommended-products-loading {
    0%,
    80%,
    100% {
      transform: scale(0);
    }
    40% {
      transform: scale(1);
    }
  }

  @media screen and (max-width: 768px) {
    .recommended-products__slider {
      padding: 0px var(--space-m);
    }

    .recommended-products__product-price {
      padding-left: 0px;
    }

    .recommended-products__product-title {
      padding-left: 0px;
    }

    .recommended-products__product-material {
      padding-left: 0px;
    }

    .recommended-products {
      padding-top: var(--space-xl);
      padding-bottom: var(--space-xl);
    }

    .recommended-products__content {
      margin-bottom: var(--space-xl);
    }

    .recommended-products__product-title {
      width: calc(100% - var(--space-m));
    }
  }

  @media screen and (max-width: 470px) {
    .recommended-products__slider-wrapper {
      overflow: hidden;
    }
  }
</style>

<div
  class="recommended-products"
  id="section-{{ section.id }}"
  data-base-url="{{ routes.product_recommendations_url }}"
  data-product-id="{{ product.id }}"
  data-limit="4"
  data-section-id="{{ section.id }}"
  data-intent="related"
>
  <h2>Recommended Products</h2>

  {% if recommendations.performed %}
    {% if recommendations.products_count > 0 %}
      <div class="recommendations-loaded">
        <p>âœ… Recommendations loaded! Found {{ recommendations.products_count }} products</p>
        <div class="products-grid">
          {% for product in recommendations.products limit: 10 %}
            <div class="product-item">
              <h3>{{ product.title }}</h3>
              <p>{{ product.price | money }}</p>
              {% if product.featured_image %}
                <img src="{{ product.featured_image | image_url: width: 200 }}" alt="{{ product.title }}" width="200">
              {% endif %}
            </div>
          {% endfor %}
        </div>
      </div>
    {% else %}
      <p>No recommendations found</p>
    {% endif %}
  {% else %}
    <div class="recommendations-loading">
      <p>Loading recommendations...</p>
      <button onclick="loadRecommendations()">Load Recommendations</button>
    </div>
  {% endif %}
</div>

<script>
  function loadRecommendations() {
    const container = document.getElementById('section-{{ section.id }}');
    const baseUrl = container.dataset.baseUrl;
    const productId = container.dataset.productId;
    const sectionId = container.dataset.sectionId;
    const limit = container.dataset.limit;
    const intent = container.dataset.intent;

    const url = `${baseUrl}?section_id=${sectionId}&product_id=${productId}&limit=${limit}&intent=${intent}`;

    console.log('Loading recommendations from:', url);

    fetch(url)
      .then((response) => {
        console.log('Response status:', response.status);
        return response.text();
      })
      .then((html) => {
        console.log('Response HTML length:', html.length);
        console.log('First 500 chars:', html.substring(0, 500));

        const parser = new DOMParser();
        const newDocument = parser.parseFromString(html, 'text/html');
        const newSection = newDocument.querySelector('#section-{{ section.id }}');

        if (newSection) {
          container.innerHTML = newSection.innerHTML;
        } else {
          console.log('No section found in response');
          container.innerHTML =
            '<p>Error: Could not load recommendations</p><pre>' + html.substring(0, 1000) + '</pre>';
        }
      })
      .catch((error) => {
        console.error('Error loading recommendations:', error);
        container.innerHTML = '<p>Error loading recommendations: ' + error.message + '</p>';
      });
  }
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
      const recommendedProductsSection = document.querySelector('#section-{{ section.id }}');
      const splideElement = recommendedProductsSection.querySelector('.recommended-products__slider');
  
      // Function to initialize Splide slider
      function initializeSlider() {
        if (splideElement && splideElement.querySelector('.splide__list').children.length > 0) {
          new Splide(splideElement, {
            perPage: 4,
            type: 'loop',
            gap: 'var(--space-2xs)',
            arrows: false,
            pagination: false,
            drag: true,
            snap: true,
            breakpoints: {
              470: {
                perPage: 1,
              },
              768: {
                perPage: 2,
                arrows: true,
              },
            },
          }).mount();
        }
      }
  
      // Load recommendations if not already performed
      if (!recommendedProductsSection.querySelector('.recommended-products__slider .splide__list')) {
        const baseUrl = '{{ routes.product_recommendations_url }}';
        const productId = '{{ product.id }}';
        const sectionId = '{{ section.id }}';
        const limit = {{ section.settings.products_to_show | default: 10 }};
        const intent = '{{ section.settings.recommendation_intent | default: "related" }}';
        
        const url = `${baseUrl}?section_id=${sectionId}&product_id=${productId}&limit=${limit}&intent=${intent}`;
        
        fetch(url)
          .then(response => response.text())
          .then(html => {
            const parser = new DOMParser();
            const newDocument = parser.parseFromString(html, 'text/html');
            const newSection = newDocument.querySelector('#section-{{ section.id }}');
            
            if (newSection) {
              recommendedProductsSection.innerHTML = newSection.innerHTML;
              initializeSlider();
            }
          })
          .catch(error => {
            console.error('Error loading recommendations:', error);
            // Hide loading dots on error
            const loadingDots = recommendedProductsSection.querySelector('.recommended-products__loading-dots');
            if (loadingDots) {
              loadingDots.style.display = 'none';
            }
          });
      } else {
        initializeSlider();
      }
    });
</script>

{% schema %}
{
  "name": "Recommended Products",
  "tag": "section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "You May Also Like"
    },
    {
      "type": "select",
      "id": "heading_animation",
      "label": "Heading Animation",
      "options": [
        {
          "value": "none",
          "label": "None"
        },
        {
          "value": "animate-word-slide-up-scroll",
          "label": "Slide Up Words"
        },
        {
          "value": "animate-word-rotate-scroll",
          "label": "Rotate In Words"
        },
        {
          "value": "animate-paragraph-slide-up-scroll",
          "label": "Slide Up"
        }
      ],
      "default": "none"
    },
    {
      "type": "textarea",
      "id": "description",
      "label": "Description",
      "default": "Discover products that perfectly complement your selection."
    },
    {
      "type": "select",
      "id": "description_animation",
      "label": "Description Animation",
      "options": [
        {
          "value": "none",
          "label": "None"
        },
        {
          "value": "animate-word-slide-up-scroll",
          "label": "Slide Up Words"
        },
        {
          "value": "animate-word-rotate-scroll",
          "label": "Rotate In Words"
        },
        {
          "value": "animate-paragraph-slide-up-scroll",
          "label": "Slide Up"
        }
      ],
      "default": "none"
    },
    {
      "type": "select",
      "id": "recommendation_intent",
      "label": "Recommendation Type",
      "options": [
        {
          "value": "related",
          "label": "Related Products"
        },
        {
          "value": "complementary",
          "label": "Complementary Products"
        }
      ],
      "default": "related",
      "info": "Related products are similar items, complementary products are items often bought together"
    },
    {
      "type": "range",
      "id": "products_to_show",
      "min": 3,
      "max": 12,
      "step": 1,
      "default": 10,
      "label": "Maximum products to show"
    },
    {
      "type": "header",
      "content": "Animation Settings"
    },
    {
      "type": "checkbox",
      "id": "animate_products",
      "label": "Animate Products",
      "default": false,
      "info": "Adds a staggered animation to products as they scroll into view"
    }
  ],
  "presets": [
    {
      "name": "Recommended Products",
      "category": "Product"
    }
  ],
  "enabled_on": {
    "templates": ["product"]
  }
}
{% endschema %}
