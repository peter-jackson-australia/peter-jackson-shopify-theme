{% comment %}
  Recommended Products Section
{% endcomment %}

{% comment %}
  Testing Different Recommendation Sources
{% endcomment %}

<div class="recommended-products-test" id="section-{{ section.id }}">
  <h2>Testing Recommendation Sources</h2>

  <!-- Test 1: Default recommendations (what we're currently getting) -->
  <div class="test-section">
    <h3>Test 1: Default Recommendations (Current)</h3>
    <button onclick="loadRecommendations('related')">Load Related Products</button>
    <button onclick="loadRecommendations('complementary')">Load Complementary Products</button>
    <div id="test1-results"></div>
  </div>

  <!-- Test 2: Check product metafields for custom recommendations -->
  <div class="test-section">
    <h3>Test 2: Product Metafields</h3>
    <p>Checking for Search & Discovery metafields...</p>

    <!-- Check for potential metafields that Search & Discovery might use -->
    {% if product.metafields.shopify %}
      <p>✅ product.metafields.shopify exists</p>
      {% for metafield in product.metafields.shopify %}
        <p>- shopify.{{ metafield[0] }}: {{ metafield[1] }}</p>
      {% endfor %}
    {% else %}
      <p>❌ No product.metafields.shopify</p>
    {% endif %}

    {% if product.metafields.recommendations %}
      <p>✅ product.metafields.recommendations exists</p>
      {% for metafield in product.metafields.recommendations %}
        <p>- recommendations.{{ metafield[0] }}: {{ metafield[1] }}</p>
      {% endfor %}
    {% else %}
      <p>❌ No product.metafields.recommendations</p>
    {% endif %}

    {% if product.metafields.search_discovery %}
      <p>✅ product.metafields.search_discovery exists</p>
      {% for metafield in product.metafields.search_discovery %}
        <p>- search_discovery.{{ metafield[0] }}: {{ metafield[1] }}</p>
      {% endfor %}
    {% else %}
      <p>❌ No product.metafields.search_discovery</p>
    {% endif %}

    <!-- Check for custom namespace -->
    {% if product.metafields.custom %}
      <p>✅ product.metafields.custom exists</p>
      {% assign custom_fields = product.metafields.custom %}
      {% for metafield in custom_fields %}
        {% if metafield[0] contains 'recommend'
          or metafield[0] contains 'related'
          or metafield[0] contains 'complement'
        %}
          <p>- custom.{{ metafield[0] }}: {{ metafield[1] }}</p>
        {% endif %}
      {% endfor %}
    {% endif %}
  </div>

  <!-- Test 3: Try different API parameters -->
  <div class="test-section">
    <h3>Test 3: API Parameter Testing</h3>
    <button onclick="loadWithParams('related', 4)">Related (limit 4)</button>
    <button onclick="loadWithParams('complementary', 4)">Complementary (limit 4)</button>
    <button onclick="loadWithParams('related', 10)">Related (limit 10)</button>
    <div id="test3-results"></div>
  </div>

  <!-- Current state info -->
  <div class="test-section">
    <h3>Current State</h3>
    <p>Product ID: {{ product.id }}</p>
    <p>Product Handle: {{ product.handle }}</p>
    <p>Recommendations performed: {{ recommendations.performed }}</p>
    <p>Recommendations count: {{ recommendations.products_count }}</p>
    <p>Recommendations intent: {{ recommendations.intent }}</p>
  </div>
</div>

<script>
  function loadRecommendations(intent) {
    const container = document.getElementById('test1-results');
    const baseUrl = '{{ routes.product_recommendations_url }}';
    const productId = '{{ product.id }}';
    const sectionId = '{{ section.id }}';

    const url = `${baseUrl}?section_id=${sectionId}&product_id=${productId}&limit=4&intent=${intent}`;

    container.innerHTML = `<p>Loading ${intent} recommendations...</p>`;
    console.log('Loading from:', url);

    fetch(url)
      .then((response) => response.text())
      .then((html) => {
        console.log(`${intent} response:`, html.substring(0, 500));

        const parser = new DOMParser();
        const newDocument = parser.parseFromString(html, 'text/html');
        const newSection = newDocument.querySelector('#section-{{ section.id }}');

        if (newSection) {
          const testDiv = newSection.querySelector('.test-section');
          if (testDiv) {
            container.innerHTML = `<h4>${intent} Results:</h4>` + testDiv.innerHTML;
          } else {
            container.innerHTML = `<h4>${intent} Results:</h4><pre>${html.substring(0, 1000)}</pre>`;
          }
        } else {
          container.innerHTML = `<h4>${intent} Error:</h4><pre>${html.substring(0, 1000)}</pre>`;
        }
      })
      .catch((error) => {
        console.error('Error:', error);
        container.innerHTML = `<p>Error: ${error.message}</p>`;
      });
  }

  function loadWithParams(intent, limit) {
    const container = document.getElementById('test3-results');
    const baseUrl = '{{ routes.product_recommendations_url }}';
    const productId = '{{ product.id }}';
    const sectionId = '{{ section.id }}';

    // Try different parameter combinations
    const urls = [
      `${baseUrl}?section_id=${sectionId}&product_id=${productId}&limit=${limit}&intent=${intent}`,
      `${baseUrl}?section_id=${sectionId}&product_id=${productId}&limit=${limit}&intent=${intent}&source=search_discovery`,
      `${baseUrl}?section_id=${sectionId}&product_id=${productId}&limit=${limit}&intent=${intent}&include_custom=true`,
    ];

    container.innerHTML = `<p>Testing ${intent} with limit ${limit}...</p>`;

    urls.forEach((url, index) => {
      console.log(`Testing URL ${index + 1}:`, url);

      fetch(url)
        .then((response) => response.text())
        .then((html) => {
          console.log(`URL ${index + 1} response length:`, html.length);
          container.innerHTML += `<p>URL ${index + 1}: ${html.length} chars received</p>`;
        })
        .catch((error) => {
          console.error(`URL ${index + 1} error:`, error);
          container.innerHTML += `<p>URL ${index + 1}: Error - ${error.message}</p>`;
        });
    });
  }
</script>

{% schema %}
{
  "name": "Recommended Products",
  "tag": "section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "You May Also Like"
    },
    {
      "type": "select",
      "id": "heading_animation",
      "label": "Heading Animation",
      "options": [
        {
          "value": "none",
          "label": "None"
        },
        {
          "value": "animate-word-slide-up-scroll",
          "label": "Slide Up Words"
        },
        {
          "value": "animate-word-rotate-scroll",
          "label": "Rotate In Words"
        },
        {
          "value": "animate-paragraph-slide-up-scroll",
          "label": "Slide Up"
        }
      ],
      "default": "none"
    },
    {
      "type": "textarea",
      "id": "description",
      "label": "Description",
      "default": "Discover products that perfectly complement your selection."
    },
    {
      "type": "select",
      "id": "description_animation",
      "label": "Description Animation",
      "options": [
        {
          "value": "none",
          "label": "None"
        },
        {
          "value": "animate-word-slide-up-scroll",
          "label": "Slide Up Words"
        },
        {
          "value": "animate-word-rotate-scroll",
          "label": "Rotate In Words"
        },
        {
          "value": "animate-paragraph-slide-up-scroll",
          "label": "Slide Up"
        }
      ],
      "default": "none"
    },
    {
      "type": "select",
      "id": "recommendation_intent",
      "label": "Recommendation Type",
      "options": [
        {
          "value": "related",
          "label": "Related Products"
        },
        {
          "value": "complementary",
          "label": "Complementary Products"
        }
      ],
      "default": "related",
      "info": "Related products are similar items, complementary products are items often bought together"
    },
    {
      "type": "range",
      "id": "products_to_show",
      "min": 3,
      "max": 12,
      "step": 1,
      "default": 10,
      "label": "Maximum products to show"
    },
    {
      "type": "header",
      "content": "Animation Settings"
    },
    {
      "type": "checkbox",
      "id": "animate_products",
      "label": "Animate Products",
      "default": false,
      "info": "Adds a staggered animation to products as they scroll into view"
    }
  ],
  "presets": [
    {
      "name": "Recommended Products",
      "category": "Product"
    }
  ],
  "enabled_on": {
    "templates": ["product"]
  }
}
{% endschema %}
