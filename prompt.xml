<prompt
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" type="development-request">
    <problem purpose="Defines the problem to be solved">
        <summary>I need a hero section component created for my Shopify Liquid store. With a responsive image backgorund, title, description and a CTA</summary>
        <detailed-description>You will create me a Shopify Liquid section that intergrates seemlessly with the Shopify theme editor, it will give you the option to upload an image used for desktop and an image used for mobile, the images will be a full page width and height - 100dvh and 100dvw respectively, the hero section will always have a h1 element, a p element description and a link, the client should be able to determine which page the link goes to in the Shopify theme editor. The component should have the option to left align, center align or right align the content and the text should also align depending on the content alignment. The content should be aligned down the bottom of the component, there should also be a slight dropdown from the bottom of the image upwards, so that the content that sits above it directly is more readable. The component must used structured and semantic HTML</detailed-description>
        <objective priority="high">Create a simple, reusable and professional hero section component for my Shopify liquid theme</objective>
    </problem>
    <context purpose="Provides technology context, constraints and existing code">
        <technology>
            <framework>Shopify Liquid</framework>
            <languages>HTML, CSS, JavaScript, Liquid</languages>
            <libraries>Shopify Liquid</libraries>
        </technology>
        <constraints>
            <performance priority="high">The code must contain the most minimal amount of elements, lines, iterations, HTTP requests and external files as possible to meet the success criteria</performance>
            <compatibility priority="high">The code must use conventions and practices that are supported by Safari 14 (16610.1.28) as a minimum standard</compatibility>
        </constraints>
    </context>
    <success-criteria purpose="Defines how to measure the success of the solution" priority="high">
        <functional-requirements priority="high">
            <requirement>The user must be able to change the heading text, the description text and the link destination on the Shopify theme editor</requirement>
            <requirement>The user must be able to choose the content alignment, left, centre or right aligned</requirement>
            <requirement>The text and content alignment must match, for example if the user selects left align, the text should also left align</requirement>
            <requirement>The image must be responsive and cover the screen. It must not be lazy loaded. It must be loaded responsively using Shopify liquid only, not custom CSS or Javascript</requirement>
        </functional-requirements>
        <non-functional-requirements priority="high">
            <requirement>The markup must follow semantic HTML best practices</requirement>
            <requirement>The markup must be accessible first</requirement>
            <requirement>The CSS must follow BEM naming conventions</requirement>
        </non-functional-requirements>
    </success-criteria>
    <examples purpose="Provides illustrative examples of a successful solution">
        <example>
            <scenario>The user of the storefront logs onto the Shopify theme editor and adds in the hero section for editing</scenario>
            <outcome>The user selects a desktop image which loads perfectly and quickly, they also select a mobile image. if no mobile image is selected, the desktop image remains. The user then enters in a title and description and lastly chooses a link for the CTA to go to from the products. The user then chooses left aligned content and the content moves to the left and all of the text also left aligns. The bottom of the image has a shadow coming upwards that makes the content easier to read.</outcome>
        </example>
    </examples>
    <code-style-preferences purpose="Defines code style preferences">
        <preferred-paradigms>
            <paradigm>Functional</paradigm>
            <paradigm>Procedural</paradigm>
        </preferred-paradigms>
        <avoided-paradigms>
            <paradigm>Object-Oriented</paradigm>
        </avoided-paradigms>
        <priorities>
            <priority>Simplicity</priority>
            <priority>JavaScript native type safety</priority>
            <priority>Bug-free</priority>
            <priority>Scalability</priority>
            <priority>Non-duplication</priority>
        </priorities>
        <naming-conventions>
            <css>BEM - Block Element Modifier</css>
            <javascript>camelCase</javascript>
        </naming-conventions>
    </code-style-preferences>
    <response-format purpose="Specifies the required response format">
        <sections>
            <section detail-level="low" word-count="50-100">Problem Overview</section>
            <section detail-level="medium" word-count="100-150">Edge Cases/Pitfalls</section>
            <section detail-level="low" word-count="50-100">Solution Approach Description</section>
            <section detail-level="high" word-count="150-250">Detailed Implementation Steps</section>
            <section>Code Implementation</section>
            <section detail-level="medium" word-count="100-150">Testing Strategy</section>
        </sections>
        <code-presentation>
            <format>Code blocks with syntax highlighting</format>
            <comments>Detailed comments explaining non-obvious logic</comments>
            <organisation>Modular, with clear function boundaries</organisation>
        </code-presentation>
        <supporting-materials>
            <include>References to documentation</include>
            <include>
                <requirement>Provable</requirement> Performance considerations
            </include>
        </supporting-materials>
    </response-format>
</prompt>